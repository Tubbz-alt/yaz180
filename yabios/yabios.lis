1     0000              MODULE yaz180_crt_asm
2     0000              LINE -1, "/home/phillip/Z80/z88dk/lib/config/../..//libsrc/_DEVELOPMENT/target/yaz180/yaz180_crt.asm"
-1    0000              
0     0000              
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              
7     0000              IF !DEFINED_startup
8     0000              	defc	DEFINED_startup = 1
9     0000              	defc startup = 0
10    0000              	IFNDEF startup
11    0000              	ENDIF
12    0000              ENDIF
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              IFNDEF startup
20    0000              
21    0000                 ; startup undefined so select a default
22    0000              
23    0000                 defc startup = 0
24    0000              
25    0000              ENDIF
26    0000              
27    0000              
28    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29    0000              ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31    0000              
32    0000              
33    0000              
34    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
35    0000              ;; yabios drivers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
36    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
37    0000              
38    0000              
39    0000                 ; yabios asci0 drivers installed on stdin, stdout, stderr
40    0000              
41    0000                 IFNDEF __CRTCFG
42    0000              
43    0000                    defc __CRTCFG = 0
44    0000              
45    0000                 ENDIF
46    0000              
47    0000                 IFNDEF __MMAP
48    0000              
49    0000                    defc __MMAP = 0
50    0000              
51    0000                 ENDIF
52    0000              
53    0000              
54    0000              
55    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
56    0000              ;;                  yaz180 YABIOS  target                    ;;
57    0000              ;; generated from target/yaz180/startup/yaz180_crt_0.asm.m4  ;;
58    0000              ;;                                                           ;;
59    0000              ;;                banked 64k address spaces                  ;;
60    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
61    0000              
62    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
63    0000              ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
64    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
65    0000              
66    0000              include "config_yaz180_public.inc"
1     0000              
2     0000              
3     0000              
4     0000              
5     0000              IFNDEF __CONFIG_Z88DK_INC_
6     0000              defc   __CONFIG_Z88DK_INC_ = 1
7     0000              
8     0000              ; Automatically Generated at Library Build Time
9     0000              
10    0000              
11    0000              
12    0000              
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              PUBLIC __Z88DK
20    0000              
21    0000              
22    0000              
23    0000              
24    0000              defc __Z88DK = 1992
25    0000              
26    0000              
27    0000              
28    0000              
29    0000              
30    0000              
31    0000              
32    0000              
33    0000              
34    0000              PUBLIC __YAZ180
35    0000              
36    0000              PUBLIC __CPU_CLOCK
37    0000              
38    0000              PUBLIC __IO_BASE_ADDRESS
39    0000              
40    0000              PUBLIC __COMMON_AREA_1_BASE
41    0000              PUBLIC __COMMON_AREA_1_PHASE_DATA
42    0000              PUBLIC __COMMON_AREA_1_PHASE_DRIVER
43    0000              
44    0000              PUBLIC __ASCI0_RX_SIZE
45    0000              PUBLIC __ASCI0_TX_SIZE
46    0000              
47    0000              PUBLIC __ASCI1_RX_SIZE
48    0000              PUBLIC __ASCI1_TX_SIZE
49    0000              
50    0000              PUBLIC __IO_BREAK
51    0000              
52    0000              PUBLIC __IO_PIO_PORT_BASE
53    0000              
54    0000              PUBLIC __IO_PCA9665_1_PORT_BASE
55    0000              PUBLIC __IO_PCA9665_2_PORT_BASE
56    0000              
57    0000              PUBLIC __APU_CMD_SIZE
58    0000              PUBLIC __APU_DATA_SIZE
59    0000              
60    0000              PUBLIC __IO_APU_PORT_BASE
61    0000              
62    0000              
63    0000              
64    0000              
65    0000              defc __YAZ180 = 1
66    0000              
67    0000              defc __CPU_CLOCK = 18432000
68    0000              
69    0000              defc __IO_BASE_ADDRESS = 0x0
70    0000              
71    0000              defc __COMMON_AREA_1_BASE = 0xf000
72    0000              defc __COMMON_AREA_1_PHASE_DATA = 0xf000
73    0000              defc __COMMON_AREA_1_PHASE_DRIVER = 0xf700
74    0000              
75    0000              defc __ASCI0_RX_SIZE = 0x100
76    0000              defc __ASCI0_TX_SIZE = 0x100
77    0000              
78    0000              defc __ASCI1_RX_SIZE = 0x100
79    0000              defc __ASCI1_TX_SIZE = 0x100
80    0000              
81    0000              defc __IO_BREAK = 0x2000
82    0000              
83    0000              defc __IO_PIO_PORT_BASE = 0x4000
84    0000              
85    0000              defc __IO_PCA9665_1_PORT_BASE = 0xA000
86    0000              defc __IO_PCA9665_2_PORT_BASE = 0x8000
87    0000              
88    0000              defc __APU_CMD_SIZE = 0x100
89    0000              defc __APU_DATA_SIZE = 0x100
90    0000              
91    0000              defc __IO_APU_PORT_BASE = 0xC000
92    0000              
93    0000              
94    0000              
95    0000              
96    0000              
97    0000              
98    0000              
99    0000              
100   0000              
101   0000              PUBLIC __Z180
102   0000              
103   0000              PUBLIC __Z180_Z80180
104   0000              PUBLIC __Z180_Z8L180
105   0000              PUBLIC __Z180_Z8S180
106   0000              
107   0000              PUBLIC __CPU_INFO
108   0000              
109   0000              PUBLIC __CPU_INFO_ENABLE_SLL
110   0000              
111   0000              PUBLIC __CPU_TIMER_SCALE
112   0000              
113   0000              
114   0000                 ; Z8S180 / Z8L180 CLASS
115   0000              
116   0000                 PUBLIC CNTLA0
117   0000                 PUBLIC CNTLA1
118   0000                 PUBLIC CNTLB0
119   0000                 PUBLIC CNTLB1
120   0000                 PUBLIC STAT0
121   0000                 PUBLIC STAT1
122   0000                 PUBLIC TDR0
123   0000                 PUBLIC TDR1
124   0000                 PUBLIC RDR0
125   0000                 PUBLIC RDR1
126   0000                 PUBLIC ASEXT0
127   0000                 PUBLIC ASEXT1
128   0000                 PUBLIC ASTC0L
129   0000                 PUBLIC ASTC0H
130   0000                 PUBLIC ASTC1L
131   0000                 PUBLIC ASTC1H
132   0000              
133   0000                 PUBLIC CNTR
134   0000                 PUBLIC TRDR
135   0000              
136   0000                 PUBLIC TMDR0L
137   0000                 PUBLIC TMDR0H
138   0000                 PUBLIC RLDR0L
139   0000                 PUBLIC RLDR0H
140   0000                 PUBLIC TCR
141   0000                 PUBLIC TMDR1L
142   0000                 PUBLIC TMDR1H
143   0000                 PUBLIC RLDR1L
144   0000                 PUBLIC RLDR1H
145   0000              
146   0000                 PUBLIC FRC
147   0000                 PUBLIC CMR
148   0000                 PUBLIC CCR
149   0000              
150   0000                 PUBLIC SAR0L
151   0000                 PUBLIC SAR0H
152   0000                 PUBLIC SAR0B
153   0000                 PUBLIC DAR0L
154   0000                 PUBLIC DAR0H
155   0000                 PUBLIC DAR0B
156   0000                 PUBLIC BCR0L
157   0000                 PUBLIC BCR0H
158   0000                 PUBLIC MAR1L
159   0000                 PUBLIC MAR1H
160   0000                 PUBLIC MAR1B
161   0000                 PUBLIC IAR1L
162   0000                 PUBLIC IAR1H
163   0000                 PUBLIC IAR1B
164   0000                 PUBLIC BCR1L
165   0000                 PUBLIC BCR1H
166   0000                 PUBLIC DSTAT
167   0000                 PUBLIC DMODE
168   0000                 PUBLIC DCNTL
169   0000              
170   0000                 PUBLIC IL
171   0000                 PUBLIC ITC
172   0000              
173   0000                 PUBLIC RCR
174   0000              
175   0000                 PUBLIC CBR
176   0000                 PUBLIC BBR
177   0000                 PUBLIC CBAR
178   0000              
179   0000                 PUBLIC OMCR
180   0000                 PUBLIC ICR
181   0000              
182   0000                 ; I/O REGISTER BIT FIELDS
183   0000              
184   0000                 PUBLIC CNTLA0_MPE
185   0000                 PUBLIC CNTLA0_RE
186   0000                 PUBLIC CNTLA0_TE
187   0000                 PUBLIC CNTLA0_RTS0
188   0000                 PUBLIC CNTLA0_MPBR
189   0000                 PUBLIC CNTLA0_EFR
190   0000                 PUBLIC CNTLA0_MODE_MASK
191   0000                 PUBLIC CNTLA0_MODE_8P2
192   0000                 PUBLIC CNTLA0_MODE_8P1
193   0000                 PUBLIC CNTLA0_MODE_8N2
194   0000                 PUBLIC CNTLA0_MODE_8N1
195   0000                 PUBLIC CNTLA0_MODE_7P2
196   0000                 PUBLIC CNTLA0_MODE_7P1
197   0000                 PUBLIC CNTLA0_MODE_7N2
198   0000                 PUBLIC CNTLA0_MODE_7N1
199   0000              
200   0000                 PUBLIC CNTLA1_MPE
201   0000                 PUBLIC CNTLA1_RE
202   0000                 PUBLIC CNTLA1_TE
203   0000                 PUBLIC CNTLA1_CKA1D
204   0000                 PUBLIC CNTLA1_MPBR
205   0000                 PUBLIC CNTLA1_EFR
206   0000                 PUBLIC CNTLA1_MODE_MASK
207   0000                 PUBLIC CNTLA1_MODE_8P2
208   0000                 PUBLIC CNTLA1_MODE_8P1
209   0000                 PUBLIC CNTLA1_MODE_8N2
210   0000                 PUBLIC CNTLA1_MODE_8N1
211   0000                 PUBLIC CNTLA1_MODE_7P2
212   0000                 PUBLIC CNTLA1_MODE_7P1
213   0000                 PUBLIC CNTLA1_MODE_7N2
214   0000                 PUBLIC CNTLA1_MODE_7N1
215   0000              
216   0000                 PUBLIC CNTLB0_MPBT
217   0000                 PUBLIC CNTLB0_MP
218   0000                 PUBLIC CNTLB0_CTS
219   0000                 PUBLIC CNTLB0_PS
220   0000                 PUBLIC CNTLB0_PEO
221   0000                 PUBLIC CNTLB0_DR
222   0000                 PUBLIC CNTLB0_SS_MASK
223   0000                 PUBLIC CNTLB0_SS_EXT
224   0000                 PUBLIC CNTLB0_SS_DIV_64
225   0000                 PUBLIC CNTLB0_SS_DIV_32
226   0000                 PUBLIC CNTLB0_SS_DIV_16
227   0000                 PUBLIC CNTLB0_SS_DIV_8
228   0000                 PUBLIC CNTLB0_SS_DIV_4
229   0000                 PUBLIC CNTLB0_SS_DIV_2
230   0000                 PUBLIC CNTLB0_SS_DIV_1
231   0000              
232   0000                 PUBLIC CNTLB1_MPBT
233   0000                 PUBLIC CNTLB1_MP
234   0000                 PUBLIC CNTLB1_CTS
235   0000                 PUBLIC CNTLB1_PS
236   0000                 PUBLIC CNTLB1_PEO
237   0000                 PUBLIC CNTLB1_DR
238   0000                 PUBLIC CNTLB1_SS_MASK
239   0000                 PUBLIC CNTLB1_SS_EXT
240   0000                 PUBLIC CNTLB1_SS_DIV_64
241   0000                 PUBLIC CNTLB1_SS_DIV_32
242   0000                 PUBLIC CNTLB1_SS_DIV_16
243   0000                 PUBLIC CNTLB1_SS_DIV_8
244   0000                 PUBLIC CNTLB1_SS_DIV_4
245   0000                 PUBLIC CNTLB1_SS_DIV_2
246   0000                 PUBLIC CNTLB1_SS_DIV_1
247   0000              
248   0000                 PUBLIC STAT0_RDRF
249   0000                 PUBLIC STAT0_OVRN
250   0000                 PUBLIC STAT0_PE
251   0000                 PUBLIC STAT0_FE
252   0000                 PUBLIC STAT0_RIE
253   0000                 PUBLIC STAT0_DCD0
254   0000                 PUBLIC STAT0_TDRE
255   0000                 PUBLIC STAT0_TIE
256   0000              
257   0000                 PUBLIC STAT1_RDRF
258   0000                 PUBLIC STAT1_OVRN
259   0000                 PUBLIC STAT1_PE
260   0000                 PUBLIC STAT1_FE
261   0000                 PUBLIC STAT1_RIE
262   0000                 PUBLIC STAT1_CTS1E
263   0000                 PUBLIC STAT1_TDRE
264   0000                 PUBLIC STAT1_TIE
265   0000              
266   0000                 PUBLIC CNTR_EF
267   0000                 PUBLIC CNTR_EIE
268   0000                 PUBLIC CNTR_RE
269   0000                 PUBLIC CNTR_TE
270   0000                 PUBLIC CNTR_SS_MASK
271   0000                 PUBLIC CNTR_SS_EXT
272   0000                 PUBLIC CNTR_SS_DIV_1280
273   0000                 PUBLIC CNTR_SS_DIV_640
274   0000                 PUBLIC CNTR_SS_DIV_320
275   0000                 PUBLIC CNTR_SS_DIV_160
276   0000                 PUBLIC CNTR_SS_DIV_80
277   0000                 PUBLIC CNTR_SS_DIV_40
278   0000                 PUBLIC CNTR_SS_DIV_20
279   0000              
280   0000                 ; PRT REGISTER BIT FIELDS
281   0000              
282   0000                 PUBLIC TCR_TIF1
283   0000                 PUBLIC TCR_TIF0
284   0000                 PUBLIC TCR_TIE1
285   0000                 PUBLIC TCR_TIE0
286   0000                 PUBLIC TCR_TOC1
287   0000                 PUBLIC TCR_TOC0
288   0000                 PUBLIC TCR_TDE1
289   0000                 PUBLIC TCR_TDE0
290   0000              
291   0000                 ; DMA REGISTER BIT FIELDS
292   0000              
293   0000                 PUBLIC DCNTL_MWI1
294   0000                 PUBLIC DCNTL_MWI0
295   0000                 PUBLIC DCNTL_IWI1
296   0000                 PUBLIC DCNTL_IWI0
297   0000                 PUBLIC DCNTL_DMS1
298   0000                 PUBLIC DCNTL_DMS0
299   0000                 PUBLIC DCNTL_DIM1
300   0000                 PUBLIC DCNTL_DIM0
301   0000              
302   0000                 ; INT/TRAP CONTROL REGISTER (ITC) BIT FIELDS
303   0000              
304   0000                 PUBLIC ITC_TRAP
305   0000                 PUBLIC ITC_UFO
306   0000                 PUBLIC ITC_ITE2
307   0000                 PUBLIC ITC_ITE1
308   0000                 PUBLIC ITC_ITE0
309   0000              
310   0000                 ; Refresh CONTROL REGISTER (RCR) BIT FIELDS
311   0000              
312   0000                 PUBLIC RCR_REFE
313   0000                 PUBLIC RCR_REFW
314   0000                 PUBLIC RCR_CYC1
315   0000                 PUBLIC RCR_CYC0
316   0000              
317   0000                 ; Operation Mode CONTROL REGISTER (OMCR) BIT FIELDS
318   0000              
319   0000                 PUBLIC OMCR_M1E
320   0000                 PUBLIC OMCR_M1TE
321   0000                 PUBLIC OMCR_IOC
322   0000              
323   0000                 ; CPU CLOCK MULTIPLIER REGISTER (CMR) BIT FIELDS (Z8S180 & higher Only)
324   0000              
325   0000                 PUBLIC CMR_X2
326   0000                 PUBLIC CMR_LN_XTAL
327   0000              
328   0000                 ; CPU CONTROL REGISTER (CCR) BIT FIELDS (Z8S180 & higher Only)
329   0000              
330   0000                 PUBLIC CCR_XTAL_X2
331   0000                 PUBLIC CCR_STANDBY
332   0000                 PUBLIC CCR_BREXT
333   0000                 PUBLIC CCR_LNPHI
334   0000                 PUBLIC CCR_IDLE
335   0000                 PUBLIC CCR_LNIO
336   0000                 PUBLIC CCR_LNCPUCTL
337   0000                 PUBLIC CCR_LNAD
338   0000              
339   0000              
340   0000              
341   0000              
342   0000              
343   0000              defc __Z180 = 0x04
344   0000              
345   0000              defc __Z180_Z80180 = 0x01
346   0000              defc __Z180_Z8L180 = 0x02
347   0000              defc __Z180_Z8S180 = 0x04
348   0000              
349   0000              defc __CPU_INFO = 0x00
350   0000              
351   0000              defc __CPU_INFO_ENABLE_SLL = 0x01
352   0000              
353   0000              defc __CPU_TIMER_SCALE = 20
354   0000              
355   0000              
356   0000                 ; Z8S180 / Z8L180 CLASS
357   0000              
358   0000                 defc CNTLA0 = 0x0
359   0000                 defc CNTLA1 = 0x1
360   0000                 defc CNTLB0 = 0x2
361   0000                 defc CNTLB1 = 0x3
362   0000                 defc STAT0 = 0x4
363   0000                 defc STAT1 = 0x5
364   0000                 defc TDR0 = 0x6
365   0000                 defc TDR1 = 0x7
366   0000                 defc RDR0 = 0x8
367   0000                 defc RDR1 = 0x9
368   0000                 defc ASEXT0 = 0x12
369   0000                 defc ASEXT1 = 0x13
370   0000                 defc ASTC0L = 0x1a
371   0000                 defc ASTC0H = 0x1b
372   0000                 defc ASTC1L = 0x1c
373   0000                 defc ASTC1H = 0x1d
374   0000              
375   0000                 defc CNTR = 0xa
376   0000                 defc TRDR = 0xb
377   0000              
378   0000                 defc TMDR0L = 0xc
379   0000                 defc TMDR0H = 0xd
380   0000                 defc RLDR0L = 0xe
381   0000                 defc RLDR0H = 0xf
382   0000                 defc TCR = 0x10
383   0000                 defc TMDR1L = 0x14
384   0000                 defc TMDR1H = 0x15
385   0000                 defc RLDR1L = 0x16
386   0000                 defc RLDR1H = 0x17
387   0000              
388   0000                 defc FRC = 0x18
389   0000                 defc CMR = 0x1e
390   0000                 defc CCR = 0x1f
391   0000              
392   0000                 defc SAR0L = 0x20
393   0000                 defc SAR0H = 0x21
394   0000                 defc SAR0B = 0x22
395   0000                 defc DAR0L = 0x23
396   0000                 defc DAR0H = 0x24
397   0000                 defc DAR0B = 0x25
398   0000                 defc BCR0L = 0x26
399   0000                 defc BCR0H = 0x27
400   0000                 defc MAR1L = 0x28
401   0000                 defc MAR1H = 0x29
402   0000                 defc MAR1B = 0x2a
403   0000                 defc IAR1L = 0x2b
404   0000                 defc IAR1H = 0x2c
405   0000                 defc IAR1B = 0x2d
406   0000                 defc BCR1L = 0x2e
407   0000                 defc BCR1H = 0x2f
408   0000                 defc DSTAT = 0x30
409   0000                 defc DMODE = 0x31
410   0000                 defc DCNTL = 0x32
411   0000              
412   0000                 defc IL = 0x33
413   0000                 defc ITC = 0x34
414   0000              
415   0000                 defc RCR = 0x36
416   0000              
417   0000                 defc CBR = 0x38
418   0000                 defc BBR = 0x39
419   0000                 defc CBAR = 0x3a
420   0000              
421   0000                 defc OMCR = 0x3e
422   0000                 defc ICR = 0x3f
423   0000              
424   0000                 ; I/O REGISTER BIT FIELDS
425   0000              
426   0000                 defc CNTLA0_MPE = 0x80
427   0000                 defc CNTLA0_RE = 0x40
428   0000                 defc CNTLA0_TE = 0x20
429   0000                 defc CNTLA0_RTS0 = 0x10
430   0000                 defc CNTLA0_MPBR = 0x08
431   0000                 defc CNTLA0_EFR = 0x08
432   0000                 defc CNTLA0_MODE_MASK = 0x07
433   0000                 defc CNTLA0_MODE_8P2 = 0x07
434   0000                 defc CNTLA0_MODE_8P1 = 0x06
435   0000                 defc CNTLA0_MODE_8N2 = 0x05
436   0000                 defc CNTLA0_MODE_8N1 = 0x04
437   0000                 defc CNTLA0_MODE_7P2 = 0x03
438   0000                 defc CNTLA0_MODE_7P1 = 0x02
439   0000                 defc CNTLA0_MODE_7N2 = 0x01
440   0000                 defc CNTLA0_MODE_7N1 = 0x00
441   0000              
442   0000                 defc CNTLA1_MPE = 0x80
443   0000                 defc CNTLA1_RE = 0x40
444   0000                 defc CNTLA1_TE = 0x20
445   0000                 defc CNTLA1_CKA1D = 0x10
446   0000                 defc CNTLA1_MPBR = 0x08
447   0000                 defc CNTLA1_EFR = 0x08
448   0000                 defc CNTLA1_MODE_MASK = 0x07
449   0000                 defc CNTLA1_MODE_8P2 = 0x07
450   0000                 defc CNTLA1_MODE_8P1 = 0x06
451   0000                 defc CNTLA1_MODE_8N2 = 0x05
452   0000                 defc CNTLA1_MODE_8N1 = 0x04
453   0000                 defc CNTLA1_MODE_7P2 = 0x03
454   0000                 defc CNTLA1_MODE_7P1 = 0x02
455   0000                 defc CNTLA1_MODE_7N2 = 0x01
456   0000                 defc CNTLA1_MODE_7N1 = 0x00
457   0000              
458   0000                 defc CNTLB0_MPBT = 0x80
459   0000                 defc CNTLB0_MP = 0x40
460   0000                 defc CNTLB0_CTS = 0x20
461   0000                 defc CNTLB0_PS = 0x20
462   0000                 defc CNTLB0_PEO = 0x10
463   0000                 defc CNTLB0_DR = 0x08
464   0000                 defc CNTLB0_SS_MASK = 0x07
465   0000                 defc CNTLB0_SS_EXT = 0x07
466   0000                 defc CNTLB0_SS_DIV_64 = 0x06
467   0000                 defc CNTLB0_SS_DIV_32 = 0x05
468   0000                 defc CNTLB0_SS_DIV_16 = 0x04
469   0000                 defc CNTLB0_SS_DIV_8 = 0x03
470   0000                 defc CNTLB0_SS_DIV_4 = 0x02
471   0000                 defc CNTLB0_SS_DIV_2 = 0x01
472   0000                 defc CNTLB0_SS_DIV_1 = 0x00
473   0000              
474   0000                 defc CNTLB1_MPBT = 0x80
475   0000                 defc CNTLB1_MP = 0x40
476   0000                 defc CNTLB1_CTS = 0x20
477   0000                 defc CNTLB1_PS = 0x20
478   0000                 defc CNTLB1_PEO = 0x10
479   0000                 defc CNTLB1_DR = 0x08
480   0000                 defc CNTLB1_SS_MASK = 0x07
481   0000                 defc CNTLB1_SS_EXT = 0x07
482   0000                 defc CNTLB1_SS_DIV_64 = 0x06
483   0000                 defc CNTLB1_SS_DIV_32 = 0x05
484   0000                 defc CNTLB1_SS_DIV_16 = 0x04
485   0000                 defc CNTLB1_SS_DIV_8 = 0x03
486   0000                 defc CNTLB1_SS_DIV_4 = 0x02
487   0000                 defc CNTLB1_SS_DIV_2 = 0x01
488   0000                 defc CNTLB1_SS_DIV_1 = 0x00
489   0000              
490   0000                 defc STAT0_RDRF = 0x80
491   0000                 defc STAT0_OVRN = 0x40
492   0000                 defc STAT0_PE = 0x20
493   0000                 defc STAT0_FE = 0x10
494   0000                 defc STAT0_RIE = 0x08
495   0000                 defc STAT0_DCD0 = 0x04
496   0000                 defc STAT0_TDRE = 0x02
497   0000                 defc STAT0_TIE = 0x01
498   0000              
499   0000                 defc STAT1_RDRF = 0x80
500   0000                 defc STAT1_OVRN = 0x40
501   0000                 defc STAT1_PE = 0x20
502   0000                 defc STAT1_FE = 0x10
503   0000                 defc STAT1_RIE = 0x08
504   0000                 defc STAT1_CTS1E = 0x04
505   0000                 defc STAT1_TDRE = 0x02
506   0000                 defc STAT1_TIE = 0x01
507   0000              
508   0000                 defc CNTR_EF = 0x80
509   0000                 defc CNTR_EIE = 0x40
510   0000                 defc CNTR_RE = 0x20
511   0000                 defc CNTR_TE = 0x10
512   0000                 defc CNTR_SS_MASK = 0x07
513   0000                 defc CNTR_SS_EXT = 0x07
514   0000                 defc CNTR_SS_DIV_1280 = 0x06
515   0000                 defc CNTR_SS_DIV_640 = 0x05
516   0000                 defc CNTR_SS_DIV_320 = 0x04
517   0000                 defc CNTR_SS_DIV_160 = 0x03
518   0000                 defc CNTR_SS_DIV_80 = 0x02
519   0000                 defc CNTR_SS_DIV_40 = 0x01
520   0000                 defc CNTR_SS_DIV_20 = 0x00
521   0000              
522   0000                 ; PRT REGISTER BIT FIELDS
523   0000              
524   0000                 defc TCR_TIF1 = 0x80
525   0000                 defc TCR_TIF0 = 0x40
526   0000                 defc TCR_TIE1 = 0x20
527   0000                 defc TCR_TIE0 = 0x10
528   0000                 defc TCR_TOC1 = 0x08
529   0000                 defc TCR_TOC0 = 0x04
530   0000                 defc TCR_TDE1 = 0x02
531   0000                 defc TCR_TDE0 = 0x01
532   0000              
533   0000                 ; DMA REGISTER BIT FIELDS
534   0000              
535   0000                 defc DSTAT_DE1 = 0x80
536   0000                 defc DSTAT_DE0 = 0x40
537   0000                 defc DSTAT_DWE1 = 0x20
538   0000                 defc DSTAT_DWE0 = 0x10
539   0000                 defc DSTAT_DIE1 = 0x08
540   0000                 defc DSTAT_DIE0 = 0x04
541   0000                 defc DSTAT_DME = 0x01
542   0000              
543   0000                 defc DMODE_DM1 = 0x20
544   0000                 defc DMODE_DM0 = 0x10
545   0000                 defc DMODE_SM1 = 0x08
546   0000                 defc DMODE_SM0 = 0x04
547   0000                 defc DMODE_MMOD = 0x02
548   0000              
549   0000                 defc DCNTL_MWI1 = 0x80
550   0000                 defc DCNTL_MWI0 = 0x40
551   0000                 defc DCNTL_IWI1 = 0x20
552   0000                 defc DCNTL_IWI0 = 0x10
553   0000                 defc DCNTL_DMS1 = 0x08
554   0000                 defc DCNTL_DMS0 = 0x04
555   0000                 defc DCNTL_DIM1 = 0x02
556   0000                 defc DCNTL_DIM0 = 0x01
557   0000              
558   0000                 ; INT/TRAP CONTROL REGISTER (ITC) BIT FIELDS
559   0000              
560   0000                 defc ITC_TRAP = 0x80
561   0000                 defc ITC_UFO = 0x40
562   0000                 defc ITC_ITE2 = 0x04
563   0000                 defc ITC_ITE1 = 0x02
564   0000                 defc ITC_ITE0 = 0x01
565   0000              
566   0000                 ; Refresh CONTROL REGISTER (RCR) BIT FIELDS
567   0000              
568   0000                 defc RCR_REFE = 0x80
569   0000                 defc RCR_REFW = 0x40
570   0000                 defc RCR_CYC1 = 0x02
571   0000                 defc RCR_CYC0 = 0x01
572   0000              
573   0000                 ; Operation Mode CONTROL REGISTER (OMCR) BIT FIELDS
574   0000              
575   0000                 defc OMCR_M1E = 0x80
576   0000                 defc OMCR_M1TE = 0x40
577   0000                 defc OMCR_IOC = 0x20
578   0000              
579   0000                 ; CPU CLOCK MULTIPLIER REGISTER (CMR) BIT FIELDS (Z8S180 & higher Only)
580   0000              
581   0000                 defc CMR_X2 = 0x80
582   0000                 defc CMR_LN_XTAL = 0x40
583   0000              
584   0000                 ; CPU CONTROL REGISTER (CCR) BIT FIELDS (Z8S180 & higher Only)
585   0000              
586   0000                 defc CCR_XTAL_X2 = 0x80
587   0000                 defc CCR_STANDBY = 0x40
588   0000                 defc CCR_BREXT = 0x20
589   0000                 defc CCR_LNPHI = 0x10
590   0000                 defc CCR_IDLE = 0x08
591   0000                 defc CCR_LNIO = 0x04
592   0000                 defc CCR_LNCPUCTL = 0x02
593   0000                 defc CCR_LNAD = 0x01
594   0000              
595   0000              
596   0000              
597   0000              
598   0000              
599   0000              
600   0000              
601   0000              
602   0000              
603   0000              
604   0000              PUBLIC __CLIB_OPT_MULTITHREAD
605   0000              
606   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
607   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
608   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
609   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
610   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
611   0000              
612   0000              PUBLIC __CLIB_OPT_IMATH
613   0000              
614   0000              PUBLIC __CLIB_OPT_IMATH_FAST
615   0000              
616   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
617   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
618   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
619   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
620   0000              PUBLIC __CLIB_OPT_IMATH_FAST_LIA
621   0000              
622   0000              PUBLIC __CLIB_OPT_IMATH_SELECT
623   0000              
624   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
625   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
626   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
627   0000              
628   0000              PUBLIC __CLIB_OPT_TXT2NUM
629   0000              
630   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
631   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
632   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
633   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
634   0000              
635   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
636   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
637   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
638   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
639   0000              
640   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT
641   0000              
642   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
643   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
644   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
645   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
646   0000              
647   0000              PUBLIC __CLIB_OPT_NUM2TXT
648   0000              
649   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
650   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
651   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
652   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
653   0000              
654   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
655   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
656   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
657   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
658   0000              
659   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT
660   0000              
661   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
662   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
663   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
664   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
665   0000              
666   0000              PUBLIC __CLIB_OPT_STDIO
667   0000              
668   0000              PUBLIC __CLIB_OPT_STDIO_VALID
669   0000              
670   0000              PUBLIC CHAR_CR
671   0000              PUBLIC CHAR_LF
672   0000              PUBLIC CHAR_BS
673   0000              PUBLIC CHAR_ESC
674   0000              PUBLIC CHAR_CAPS
675   0000              PUBLIC CHAR_BELL
676   0000              PUBLIC CHAR_CTRL_C
677   0000              PUBLIC CHAR_CTRL_D
678   0000              PUBLIC CHAR_CTRL_Z
679   0000              PUBLIC CHAR_CURSOR_UC
680   0000              PUBLIC CHAR_CURSOR_LC
681   0000              PUBLIC CHAR_PASSWORD
682   0000              
683   0000              PUBLIC __CLIB_OPT_PRINTF
684   0000              
685   0000              PUBLIC __CLIB_OPT_PRINTF_d
686   0000              PUBLIC __CLIB_OPT_PRINTF_u
687   0000              PUBLIC __CLIB_OPT_PRINTF_x
688   0000              PUBLIC __CLIB_OPT_PRINTF_X
689   0000              PUBLIC __CLIB_OPT_PRINTF_o
690   0000              PUBLIC __CLIB_OPT_PRINTF_n
691   0000              PUBLIC __CLIB_OPT_PRINTF_i
692   0000              PUBLIC __CLIB_OPT_PRINTF_p
693   0000              PUBLIC __CLIB_OPT_PRINTF_B
694   0000              PUBLIC __CLIB_OPT_PRINTF_s
695   0000              PUBLIC __CLIB_OPT_PRINTF_c
696   0000              PUBLIC __CLIB_OPT_PRINTF_I
697   0000              PUBLIC __CLIB_OPT_PRINTF_ld
698   0000              PUBLIC __CLIB_OPT_PRINTF_lu
699   0000              PUBLIC __CLIB_OPT_PRINTF_lx
700   0000              PUBLIC __CLIB_OPT_PRINTF_lX
701   0000              PUBLIC __CLIB_OPT_PRINTF_lo
702   0000              PUBLIC __CLIB_OPT_PRINTF_ln
703   0000              PUBLIC __CLIB_OPT_PRINTF_li
704   0000              PUBLIC __CLIB_OPT_PRINTF_lp
705   0000              PUBLIC __CLIB_OPT_PRINTF_lB
706   0000              PUBLIC __CLIB_OPT_PRINTF_a
707   0000              PUBLIC __CLIB_OPT_PRINTF_A
708   0000              PUBLIC __CLIB_OPT_PRINTF_e
709   0000              PUBLIC __CLIB_OPT_PRINTF_E
710   0000              PUBLIC __CLIB_OPT_PRINTF_f
711   0000              PUBLIC __CLIB_OPT_PRINTF_F
712   0000              PUBLIC __CLIB_OPT_PRINTF_g
713   0000              PUBLIC __CLIB_OPT_PRINTF_G
714   0000              
715   0000              PUBLIC __CLIB_OPT_PRINTF_2
716   0000              
717   0000              PUBLIC __CLIB_OPT_PRINTF_2_lld
718   0000              PUBLIC __CLIB_OPT_PRINTF_2_llu
719   0000              PUBLIC __CLIB_OPT_PRINTF_2_llx
720   0000              PUBLIC __CLIB_OPT_PRINTF_2_llX
721   0000              PUBLIC __CLIB_OPT_PRINTF_2_llo
722   0000              PUBLIC __CLIB_OPT_PRINTF_2_lli
723   0000              
724   0000              PUBLIC __CLIB_OPT_SCANF
725   0000              
726   0000              PUBLIC __CLIB_OPT_SCANF_d
727   0000              PUBLIC __CLIB_OPT_SCANF_u
728   0000              PUBLIC __CLIB_OPT_SCANF_x
729   0000              PUBLIC __CLIB_OPT_SCANF_X
730   0000              PUBLIC __CLIB_OPT_SCANF_o
731   0000              PUBLIC __CLIB_OPT_SCANF_n
732   0000              PUBLIC __CLIB_OPT_SCANF_i
733   0000              PUBLIC __CLIB_OPT_SCANF_p
734   0000              PUBLIC __CLIB_OPT_SCANF_B
735   0000              PUBLIC __CLIB_OPT_SCANF_s
736   0000              PUBLIC __CLIB_OPT_SCANF_c
737   0000              PUBLIC __CLIB_OPT_SCANF_I
738   0000              PUBLIC __CLIB_OPT_SCANF_ld
739   0000              PUBLIC __CLIB_OPT_SCANF_lu
740   0000              PUBLIC __CLIB_OPT_SCANF_lx
741   0000              PUBLIC __CLIB_OPT_SCANF_lX
742   0000              PUBLIC __CLIB_OPT_SCANF_lo
743   0000              PUBLIC __CLIB_OPT_SCANF_ln
744   0000              PUBLIC __CLIB_OPT_SCANF_li
745   0000              PUBLIC __CLIB_OPT_SCANF_lp
746   0000              PUBLIC __CLIB_OPT_SCANF_lB
747   0000              PUBLIC __CLIB_OPT_SCANF_BRACKET
748   0000              PUBLIC __CLIB_OPT_SCANF_a
749   0000              PUBLIC __CLIB_OPT_SCANF_A
750   0000              PUBLIC __CLIB_OPT_SCANF_e
751   0000              PUBLIC __CLIB_OPT_SCANF_E
752   0000              PUBLIC __CLIB_OPT_SCANF_f
753   0000              PUBLIC __CLIB_OPT_SCANF_F
754   0000              PUBLIC __CLIB_OPT_SCANF_g
755   0000              PUBLIC __CLIB_OPT_SCANF_G
756   0000              
757   0000              PUBLIC __CLIB_OPT_SCANF_2
758   0000              
759   0000              PUBLIC __CLIB_OPT_SCANF_2_lld
760   0000              PUBLIC __CLIB_OPT_SCANF_2_llu
761   0000              PUBLIC __CLIB_OPT_SCANF_2_llx
762   0000              PUBLIC __CLIB_OPT_SCANF_2_llX
763   0000              PUBLIC __CLIB_OPT_SCANF_2_llo
764   0000              PUBLIC __CLIB_OPT_SCANF_2_lli
765   0000              
766   0000              PUBLIC __CLIB_OPT_UNROLL
767   0000              
768   0000              PUBLIC __CLIB_OPT_UNROLL_MEMCPY
769   0000              PUBLIC __CLIB_OPT_UNROLL_MEMSET
770   0000              PUBLIC __CLIB_OPT_UNROLL_OTIR
771   0000              PUBLIC __CLIB_OPT_UNROLL_LDIR
772   0000              PUBLIC __CLIB_OPT_UNROLL_USER_SMC
773   0000              PUBLIC __CLIB_OPT_UNROLL_LIB_SMC
774   0000              
775   0000              PUBLIC __CLIB_OPT_STRTOD
776   0000              
777   0000              PUBLIC __CLIB_OPT_STRTOD_NAN
778   0000              PUBLIC __CLIB_OPT_STRTOD_INF
779   0000              PUBLIC __CLIB_OPT_STRTOD_HEX
780   0000              
781   0000              PUBLIC __CLIB_OPT_SORT
782   0000              
783   0000              PUBLIC __CLIB_OPT_SORT_INSERTION
784   0000              PUBLIC __CLIB_OPT_SORT_SHELL
785   0000              PUBLIC __CLIB_OPT_SORT_QUICK
786   0000              
787   0000              PUBLIC __CLIB_OPT_SORT_QSORT
788   0000              
789   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
790   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
791   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
792   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
793   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
794   0000              
795   0000              PUBLIC __CLIB_OPT_ERROR
796   0000              
797   0000              PUBLIC __CLIB_OPT_ERROR_ENABLED
798   0000              PUBLIC __CLIB_OPT_ERROR_VERBOSE
799   0000              
800   0000              
801   0000              
802   0000              
803   0000              defc __CLIB_OPT_MULTITHREAD = 0x00
804   0000              
805   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
806   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
807   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
808   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
809   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
810   0000              
811   0000              defc __CLIB_OPT_IMATH = 0
812   0000              
813   0000              defc __CLIB_OPT_IMATH_FAST = 0x0f
814   0000              
815   0000              defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
816   0000              defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
817   0000              defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
818   0000              defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
819   0000              defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
820   0000              
821   0000              defc __CLIB_OPT_IMATH_SELECT = 0x00
822   0000              
823   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
824   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
825   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
826   0000              
827   0000              defc __CLIB_OPT_TXT2NUM = 0x04
828   0000              
829   0000              defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
830   0000              defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
831   0000              defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
832   0000              defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
833   0000              
834   0000              defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
835   0000              defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
836   0000              defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
837   0000              defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
838   0000              
839   0000              defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
840   0000              
841   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
842   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
843   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
844   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
845   0000              
846   0000              defc __CLIB_OPT_NUM2TXT = 0x00
847   0000              
848   0000              defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
849   0000              defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
850   0000              defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
851   0000              defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
852   0000              
853   0000              defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
854   0000              defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
855   0000              defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
856   0000              defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
857   0000              
858   0000              defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
859   0000              
860   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
861   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
862   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
863   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
864   0000              
865   0000              defc __CLIB_OPT_STDIO = 0x00
866   0000              
867   0000              defc __CLIB_OPT_STDIO_VALID = 0x01
868   0000              
869   0000              defc CHAR_CR = 13
870   0000              defc CHAR_LF = 10
871   0000              defc CHAR_BS = 8
872   0000              defc CHAR_ESC = 27
873   0000              defc CHAR_CAPS = 6
874   0000              defc CHAR_BELL = 7
875   0000              defc CHAR_CTRL_C = 3
876   0000              defc CHAR_CTRL_D = 4
877   0000              defc CHAR_CTRL_Z = 26
878   0000              defc CHAR_CURSOR_UC = 45
879   0000              defc CHAR_CURSOR_LC = 95
880   0000              defc CHAR_PASSWORD = 42
881   0000              
882   0000              defc __CLIB_OPT_PRINTF = 0x002ff6ff
883   0000              
884   0000              defc __CLIB_OPT_PRINTF_d = 0x00000001
885   0000              defc __CLIB_OPT_PRINTF_u = 0x00000002
886   0000              defc __CLIB_OPT_PRINTF_x = 0x00000004
887   0000              defc __CLIB_OPT_PRINTF_X = 0x00000008
888   0000              defc __CLIB_OPT_PRINTF_o = 0x00000010
889   0000              defc __CLIB_OPT_PRINTF_n = 0x00000020
890   0000              defc __CLIB_OPT_PRINTF_i = 0x00000040
891   0000              defc __CLIB_OPT_PRINTF_p = 0x00000080
892   0000              defc __CLIB_OPT_PRINTF_B = 0x00000100
893   0000              defc __CLIB_OPT_PRINTF_s = 0x00000200
894   0000              defc __CLIB_OPT_PRINTF_c = 0x00000400
895   0000              defc __CLIB_OPT_PRINTF_I = 0x00000800
896   0000              defc __CLIB_OPT_PRINTF_ld = 0x00001000
897   0000              defc __CLIB_OPT_PRINTF_lu = 0x00002000
898   0000              defc __CLIB_OPT_PRINTF_lx = 0x00004000
899   0000              defc __CLIB_OPT_PRINTF_lX = 0x00008000
900   0000              defc __CLIB_OPT_PRINTF_lo = 0x00010000
901   0000              defc __CLIB_OPT_PRINTF_ln = 0x00020000
902   0000              defc __CLIB_OPT_PRINTF_li = 0x00040000
903   0000              defc __CLIB_OPT_PRINTF_lp = 0x00080000
904   0000              defc __CLIB_OPT_PRINTF_lB = 0x00100000
905   0000              defc __CLIB_OPT_PRINTF_a = 0x00400000
906   0000              defc __CLIB_OPT_PRINTF_A = 0x00800000
907   0000              defc __CLIB_OPT_PRINTF_e = 0x01000000
908   0000              defc __CLIB_OPT_PRINTF_E = 0x02000000
909   0000              defc __CLIB_OPT_PRINTF_f = 0x04000000
910   0000              defc __CLIB_OPT_PRINTF_F = 0x08000000
911   0000              defc __CLIB_OPT_PRINTF_g = 0x10000000
912   0000              defc __CLIB_OPT_PRINTF_G = 0x20000000
913   0000              
914   0000              defc __CLIB_OPT_PRINTF_2 = 0x00
915   0000              
916   0000              defc __CLIB_OPT_PRINTF_2_lld = 0x01
917   0000              defc __CLIB_OPT_PRINTF_2_llu = 0x02
918   0000              defc __CLIB_OPT_PRINTF_2_llx = 0x04
919   0000              defc __CLIB_OPT_PRINTF_2_llX = 0x08
920   0000              defc __CLIB_OPT_PRINTF_2_llo = 0x10
921   0000              defc __CLIB_OPT_PRINTF_2_lli = 0x40
922   0000              
923   0000              defc __CLIB_OPT_SCANF = 0x002ff6ff
924   0000              
925   0000              defc __CLIB_OPT_SCANF_d = 0x00000001
926   0000              defc __CLIB_OPT_SCANF_u = 0x00000002
927   0000              defc __CLIB_OPT_SCANF_x = 0x00000004
928   0000              defc __CLIB_OPT_SCANF_X = 0x00000008
929   0000              defc __CLIB_OPT_SCANF_o = 0x00000010
930   0000              defc __CLIB_OPT_SCANF_n = 0x00000020
931   0000              defc __CLIB_OPT_SCANF_i = 0x00000040
932   0000              defc __CLIB_OPT_SCANF_p = 0x00000080
933   0000              defc __CLIB_OPT_SCANF_B = 0x00000100
934   0000              defc __CLIB_OPT_SCANF_s = 0x00000200
935   0000              defc __CLIB_OPT_SCANF_c = 0x00000400
936   0000              defc __CLIB_OPT_SCANF_I = 0x00000800
937   0000              defc __CLIB_OPT_SCANF_ld = 0x00001000
938   0000              defc __CLIB_OPT_SCANF_lu = 0x00002000
939   0000              defc __CLIB_OPT_SCANF_lx = 0x00004000
940   0000              defc __CLIB_OPT_SCANF_lX = 0x00008000
941   0000              defc __CLIB_OPT_SCANF_lo = 0x00010000
942   0000              defc __CLIB_OPT_SCANF_ln = 0x00020000
943   0000              defc __CLIB_OPT_SCANF_li = 0x00040000
944   0000              defc __CLIB_OPT_SCANF_lp = 0x00080000
945   0000              defc __CLIB_OPT_SCANF_lB = 0x00100000
946   0000              defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
947   0000              defc __CLIB_OPT_SCANF_a = 0x00400000
948   0000              defc __CLIB_OPT_SCANF_A = 0x00800000
949   0000              defc __CLIB_OPT_SCANF_e = 0x01000000
950   0000              defc __CLIB_OPT_SCANF_E = 0x02000000
951   0000              defc __CLIB_OPT_SCANF_f = 0x04000000
952   0000              defc __CLIB_OPT_SCANF_F = 0x08000000
953   0000              defc __CLIB_OPT_SCANF_g = 0x10000000
954   0000              defc __CLIB_OPT_SCANF_G = 0x20000000
955   0000              
956   0000              defc __CLIB_OPT_SCANF_2 = 0x00
957   0000              
958   0000              defc __CLIB_OPT_SCANF_2_lld = 0x01
959   0000              defc __CLIB_OPT_SCANF_2_llu = 0x02
960   0000              defc __CLIB_OPT_SCANF_2_llx = 0x04
961   0000              defc __CLIB_OPT_SCANF_2_llX = 0x08
962   0000              defc __CLIB_OPT_SCANF_2_llo = 0x10
963   0000              defc __CLIB_OPT_SCANF_2_lli = 0x40
964   0000              
965   0000              defc __CLIB_OPT_UNROLL = 0x00
966   0000              
967   0000              defc __CLIB_OPT_UNROLL_MEMCPY = 0x01
968   0000              defc __CLIB_OPT_UNROLL_MEMSET = 0x02
969   0000              defc __CLIB_OPT_UNROLL_OTIR = 0x10
970   0000              defc __CLIB_OPT_UNROLL_LDIR = 0x20
971   0000              defc __CLIB_OPT_UNROLL_USER_SMC = 0x40
972   0000              defc __CLIB_OPT_UNROLL_LIB_SMC = 0x80
973   0000              
974   0000              defc __CLIB_OPT_STRTOD = 0x00
975   0000              
976   0000              defc __CLIB_OPT_STRTOD_NAN = 0x01
977   0000              defc __CLIB_OPT_STRTOD_INF = 0x01
978   0000              defc __CLIB_OPT_STRTOD_HEX = 0x02
979   0000              
980   0000              defc __CLIB_OPT_SORT = 1
981   0000              
982   0000              defc __CLIB_OPT_SORT_INSERTION = 0
983   0000              defc __CLIB_OPT_SORT_SHELL = 1
984   0000              defc __CLIB_OPT_SORT_QUICK = 2
985   0000              
986   0000              defc __CLIB_OPT_SORT_QSORT = 0x0c
987   0000              
988   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
989   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
990   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
991   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
992   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
993   0000              
994   0000              defc __CLIB_OPT_ERROR = 0x00
995   0000              
996   0000              defc __CLIB_OPT_ERROR_ENABLED = 0x01
997   0000              defc __CLIB_OPT_ERROR_VERBOSE = 0x02
998   0000              
999   0000              
1000  0000              
1001  0000              
1002  0000              
1003  0000              
1004  0000              
1005  0000              
1006  0000              
1007  0000              
1008  0000              
1009  0000              
1010  0000              
1011  0000              PUBLIC __EOK
1012  0000              PUBLIC __EACCES
1013  0000              PUBLIC __EBADF
1014  0000              PUBLIC __EBDFD
1015  0000              PUBLIC __EDOM
1016  0000              PUBLIC __EFBIG
1017  0000              PUBLIC __EINVAL
1018  0000              PUBLIC __EMFILE
1019  0000              PUBLIC __ENFILE
1020  0000              PUBLIC __ENOLCK
1021  0000              PUBLIC __ENOMEM
1022  0000              PUBLIC __ENOTSUP
1023  0000              PUBLIC __EOVERFLOW
1024  0000              PUBLIC __ERANGE
1025  0000              PUBLIC __ESTAT
1026  0000              PUBLIC __EAGAIN
1027  0000              PUBLIC __EWOULDBLOCK
1028  0000              
1029  0000              PUBLIC __ERROR_NEXT
1030  0000              
1031  0000              PUBLIC STDIO_SEEK_SET
1032  0000              PUBLIC STDIO_SEEK_CUR
1033  0000              PUBLIC STDIO_SEEK_END
1034  0000              
1035  0000              PUBLIC STDIO_MSG_PUTC
1036  0000              PUBLIC STDIO_MSG_WRIT
1037  0000              PUBLIC STDIO_MSG_GETC
1038  0000              PUBLIC STDIO_MSG_EATC
1039  0000              PUBLIC STDIO_MSG_READ
1040  0000              PUBLIC STDIO_MSG_SEEK
1041  0000              PUBLIC STDIO_MSG_ICTL
1042  0000              PUBLIC STDIO_MSG_FLSH
1043  0000              PUBLIC STDIO_MSG_CLOS
1044  0000              
1045  0000              PUBLIC ITERM_MSG_GETC
1046  0000              PUBLIC ITERM_MSG_REJECT
1047  0000              PUBLIC ITERM_MSG_INTERRUPT
1048  0000              PUBLIC ITERM_MSG_PUTC
1049  0000              PUBLIC ITERM_MSG_PRINT_CURSOR
1050  0000              PUBLIC ITERM_MSG_ERASE_CURSOR
1051  0000              PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
1052  0000              PUBLIC ITERM_MSG_BS
1053  0000              PUBLIC ITERM_MSG_BS_PWD
1054  0000              PUBLIC ITERM_MSG_READLINE_BEGIN
1055  0000              PUBLIC ITERM_MSG_READLINE_END
1056  0000              PUBLIC ITERM_MSG_BELL
1057  0000              
1058  0000              PUBLIC __MESSAGE_ITERM_NEXT__
1059  0000              
1060  0000              PUBLIC OTERM_MSG_PUTC
1061  0000              PUBLIC OTERM_MSG_TTY
1062  0000              PUBLIC OTERM_MSG_FZX_PUTC
1063  0000              PUBLIC OTERM_MSG_PRINTC
1064  0000              PUBLIC OTERM_MSG_SCROLL
1065  0000              PUBLIC OTERM_MSG_CLS
1066  0000              PUBLIC OTERM_MSG_PAUSE
1067  0000              PUBLIC OTERM_MSG_BELL
1068  0000              PUBLIC OTERM_MSG_PSCROLL
1069  0000              PUBLIC OTERM_MSG_FZX_GET_XOR_DRAW
1070  0000              
1071  0000              PUBLIC __MESSAGE_OTERM_NEXT__
1072  0000              
1073  0000              PUBLIC ICHAR_MSG_GETC
1074  0000              PUBLIC OCHAR_MSG_PUTC_BIN
1075  0000              PUBLIC OCHAR_MSG_PUTC
1076  0000              
1077  0000              PUBLIC __MESSAGE_NEXT__
1078  0000              
1079  0000              PUBLIC mtx_plain
1080  0000              PUBLIC mtx_recursive
1081  0000              PUBLIC mtx_timed
1082  0000              
1083  0000              PUBLIC thrd_success
1084  0000              PUBLIC thrd_error
1085  0000              PUBLIC thrd_nomem
1086  0000              PUBLIC thrd_busy
1087  0000              PUBLIC thrd_timedout
1088  0000              
1089  0000              PUBLIC IOCTL_RESET
1090  0000              
1091  0000              PUBLIC IOCTL_ITERM_ECHO
1092  0000              PUBLIC IOCTL_ITERM_PASS
1093  0000              PUBLIC IOCTL_ITERM_LINE
1094  0000              PUBLIC IOCTL_ITERM_COOK
1095  0000              PUBLIC IOCTL_ITERM_CAPS
1096  0000              PUBLIC IOCTL_ITERM_CRLF
1097  0000              PUBLIC IOCTL_ITERM_CURS
1098  0000              
1099  0000              PUBLIC IOCTL_ITERM_TIE
1100  0000              PUBLIC IOCTL_ITERM_GET_EDITBUF
1101  0000              PUBLIC IOCTL_ITERM_SET_EDITBUF
1102  0000              
1103  0000              PUBLIC IOCTL_OTERM_PAGE
1104  0000              PUBLIC IOCTL_OTERM_PAUSE
1105  0000              PUBLIC IOCTL_OTERM_COOK
1106  0000              PUBLIC IOCTL_OTERM_CRLF
1107  0000              PUBLIC IOCTL_OTERM_CLEAR
1108  0000              PUBLIC IOCTL_OTERM_SIGNAL
1109  0000              PUBLIC IOCTL_OTERM_BELL
1110  0000              
1111  0000              PUBLIC IOCTL_OTERM_CLS
1112  0000              PUBLIC IOCTL_OTERM_RESET_SCROLL
1113  0000              PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
1114  0000              PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
1115  0000              PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
1116  0000              PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
1117  0000              PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
1118  0000              PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
1119  0000              PUBLIC IOCTL_OTERM_GET_OTERM
1120  0000              PUBLIC IOCTL_OTERM_SCROLL
1121  0000              PUBLIC IOCTL_OTERM_FONT
1122  0000              
1123  0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
1124  0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
1125  0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
1126  0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
1127  0000              PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
1128  0000              PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
1129  0000              PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
1130  0000              PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
1131  0000              PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
1132  0000              
1133  0000              PUBLIC IOCTL_ICHAR_CRLF
1134  0000              
1135  0000              PUBLIC IOCTL_OCHAR_CRLF
1136  0000              
1137  0000              
1138  0000              
1139  0000              
1140  0000              defc __EOK = 0
1141  0000              defc __EACCES = 1
1142  0000              defc __EBADF = 2
1143  0000              defc __EBDFD = 3
1144  0000              defc __EDOM = 4
1145  0000              defc __EFBIG = 5
1146  0000              defc __EINVAL = 6
1147  0000              defc __EMFILE = 7
1148  0000              defc __ENFILE = 8
1149  0000              defc __ENOLCK = 9
1150  0000              defc __ENOMEM = 10
1151  0000              defc __ENOTSUP = 11
1152  0000              defc __EOVERFLOW = 12
1153  0000              defc __ERANGE = 13
1154  0000              defc __ESTAT = 14
1155  0000              defc __EAGAIN = 15
1156  0000              defc __EWOULDBLOCK = 15
1157  0000              
1158  0000              defc __ERROR_NEXT = 50
1159  0000              
1160  0000              defc STDIO_SEEK_SET = 0
1161  0000              defc STDIO_SEEK_CUR = 1
1162  0000              defc STDIO_SEEK_END = 2
1163  0000              
1164  0000              defc STDIO_MSG_PUTC = 1
1165  0000              defc STDIO_MSG_WRIT = 2
1166  0000              defc STDIO_MSG_GETC = 3
1167  0000              defc STDIO_MSG_EATC = 4
1168  0000              defc STDIO_MSG_READ = 5
1169  0000              defc STDIO_MSG_SEEK = 6
1170  0000              defc STDIO_MSG_ICTL = 7
1171  0000              defc STDIO_MSG_FLSH = 8
1172  0000              defc STDIO_MSG_CLOS = 9
1173  0000              
1174  0000              defc ITERM_MSG_GETC = 15
1175  0000              defc ITERM_MSG_REJECT = 16
1176  0000              defc ITERM_MSG_INTERRUPT = 17
1177  0000              defc ITERM_MSG_PUTC = 18
1178  0000              defc ITERM_MSG_PRINT_CURSOR = 19
1179  0000              defc ITERM_MSG_ERASE_CURSOR = 20
1180  0000              defc ITERM_MSG_ERASE_CURSOR_PWD = 21
1181  0000              defc ITERM_MSG_BS = 22
1182  0000              defc ITERM_MSG_BS_PWD = 23
1183  0000              defc ITERM_MSG_READLINE_BEGIN = 24
1184  0000              defc ITERM_MSG_READLINE_END = 25
1185  0000              defc ITERM_MSG_BELL = 26
1186  0000              
1187  0000              defc __MESSAGE_ITERM_NEXT__ = 27
1188  0000              
1189  0000              defc OTERM_MSG_PUTC = 30
1190  0000              defc OTERM_MSG_TTY = 31
1191  0000              defc OTERM_MSG_FZX_PUTC = 32
1192  0000              defc OTERM_MSG_PRINTC = 33
1193  0000              defc OTERM_MSG_SCROLL = 34
1194  0000              defc OTERM_MSG_CLS = 35
1195  0000              defc OTERM_MSG_PAUSE = 36
1196  0000              defc OTERM_MSG_BELL = 37
1197  0000              defc OTERM_MSG_PSCROLL = 38
1198  0000              defc OTERM_MSG_FZX_GET_XOR_DRAW = 39
1199  0000              
1200  0000              defc __MESSAGE_OTERM_NEXT__ = 40
1201  0000              
1202  0000              defc ICHAR_MSG_GETC = 15
1203  0000              defc OCHAR_MSG_PUTC_BIN = 30
1204  0000              defc OCHAR_MSG_PUTC = 33
1205  0000              
1206  0000              defc __MESSAGE_NEXT__ = 45
1207  0000              
1208  0000              defc mtx_plain = 0x01
1209  0000              defc mtx_recursive = 0x02
1210  0000              defc mtx_timed = 0x04
1211  0000              
1212  0000              defc thrd_success = 0x00
1213  0000              defc thrd_error = 0x01
1214  0000              defc thrd_nomem = 0x02
1215  0000              defc thrd_busy = 0x04
1216  0000              defc thrd_timedout = 0x08
1217  0000              
1218  0000              defc IOCTL_RESET = 0x0000
1219  0000              
1220  0000              defc IOCTL_ITERM_ECHO = 0xc081
1221  0000              defc IOCTL_ITERM_PASS = 0xc041
1222  0000              defc IOCTL_ITERM_LINE = 0xc021
1223  0000              defc IOCTL_ITERM_COOK = 0xc011
1224  0000              defc IOCTL_ITERM_CAPS = 0xc009
1225  0000              defc IOCTL_ITERM_CRLF = 0xc101
1226  0000              defc IOCTL_ITERM_CURS = 0xc201
1227  0000              
1228  0000              defc IOCTL_ITERM_TIE = 0x0201
1229  0000              defc IOCTL_ITERM_GET_EDITBUF = 0x0381
1230  0000              defc IOCTL_ITERM_SET_EDITBUF = 0x0301
1231  0000              
1232  0000              defc IOCTL_OTERM_PAGE = 0xc082
1233  0000              defc IOCTL_OTERM_PAUSE = 0xc042
1234  0000              defc IOCTL_OTERM_COOK = 0xc022
1235  0000              defc IOCTL_OTERM_CRLF = 0xc012
1236  0000              defc IOCTL_OTERM_CLEAR = 0xe002
1237  0000              defc IOCTL_OTERM_SIGNAL = 0xc202
1238  0000              defc IOCTL_OTERM_BELL = 0xc102
1239  0000              
1240  0000              defc IOCTL_OTERM_CLS = 0x0102
1241  0000              defc IOCTL_OTERM_RESET_SCROLL = 0x0202
1242  0000              defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
1243  0000              defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
1244  0000              defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
1245  0000              defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
1246  0000              defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
1247  0000              defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
1248  0000              defc IOCTL_OTERM_GET_OTERM = 0x0602
1249  0000              defc IOCTL_OTERM_SCROLL = 0x0702
1250  0000              defc IOCTL_OTERM_FONT = 0x0802
1251  0000              
1252  0000              defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
1253  0000              defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
1254  0000              defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
1255  0000              defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
1256  0000              defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
1257  0000              defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
1258  0000              defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
1259  0000              defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
1260  0000              defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
1261  0000              
1262  0000              defc IOCTL_ICHAR_CRLF = 0xc103
1263  0000              
1264  0000              defc IOCTL_OCHAR_CRLF = 0xc014
1265  0000              
1266  0000              
1267  0000              
1268  0000              
1269  0000              
1270  0000              
1271  0000              
1272  0000              
1273  0000              
1274  0000              
1275  0000              
1276  0000              
1277  0000              
1278  0000              
1279  0000              
1280  0000              
1281  0000              
1282  0000              
1283  0000              
1284  0000              
1285  0000              
1286  0000              
1287  0000              
1288  0000              
1289  0000              
1290  0000              
1291  0000              
1292  0000              
1293  0000              PUBLIC __Z80_VECTOR_BASE_BASIC
1294  0000              PUBLIC __Z180_VECTOR_IL_BASIC
1295  0000              
1296  0000              
1297  0000              
1298  0000              
1299  0000              defc __Z80_VECTOR_BASE_BASIC = 0x2000
1300  0000              defc __Z180_VECTOR_IL_BASIC = 0x40
1301  0000              
1302  0000              
1303  0000              
1304  0000              
1305  0000              
1306  0000              
1307  0000              
1308  0000              
1309  0000              
1310  0000              PUBLIC __IO_PIO_PORT_A
1311  0000              PUBLIC __IO_PIO_PORT_B
1312  0000              PUBLIC __IO_PIO_PORT_C
1313  0000              PUBLIC __IO_PIO_CONTROL
1314  0000              
1315  0000              PUBLIC __IO_PIO_CNTL_00
1316  0000              PUBLIC __IO_PIO_CNTL_01
1317  0000              PUBLIC __IO_PIO_CNTL_02
1318  0000              PUBLIC __IO_PIO_CNTL_03
1319  0000              
1320  0000              PUBLIC __IO_PIO_CNTL_04
1321  0000              PUBLIC __IO_PIO_CNTL_05
1322  0000              PUBLIC __IO_PIO_CNTL_06
1323  0000              PUBLIC __IO_PIO_CNTL_07
1324  0000              
1325  0000              PUBLIC __IO_PIO_CNTL_08
1326  0000              PUBLIC __IO_PIO_CNTL_09
1327  0000              PUBLIC __IO_PIO_CNTL_10
1328  0000              PUBLIC __IO_PIO_CNTL_11
1329  0000              
1330  0000              PUBLIC __IO_PIO_CNTL_12
1331  0000              PUBLIC __IO_PIO_CNTL_13
1332  0000              PUBLIC __IO_PIO_CNTL_14
1333  0000              PUBLIC __IO_PIO_CNTL_15
1334  0000              
1335  0000              
1336  0000              
1337  0000              
1338  0000              defc __IO_PIO_PORT_A = 0x4000
1339  0000              defc __IO_PIO_PORT_B = 0x4001
1340  0000              defc __IO_PIO_PORT_C = 0x4002
1341  0000              defc __IO_PIO_CONTROL = 0x4003
1342  0000              
1343  0000              defc __IO_PIO_CNTL_00 = 0x80
1344  0000              defc __IO_PIO_CNTL_01 = 0x81
1345  0000              defc __IO_PIO_CNTL_02 = 0x82
1346  0000              defc __IO_PIO_CNTL_03 = 0x83
1347  0000              
1348  0000              defc __IO_PIO_CNTL_04 = 0x88
1349  0000              defc __IO_PIO_CNTL_05 = 0x89
1350  0000              defc __IO_PIO_CNTL_06 = 0x8A
1351  0000              defc __IO_PIO_CNTL_07 = 0x8B
1352  0000              
1353  0000              defc __IO_PIO_CNTL_08 = 0x90
1354  0000              defc __IO_PIO_CNTL_09 = 0x91
1355  0000              defc __IO_PIO_CNTL_10 = 0x92
1356  0000              defc __IO_PIO_CNTL_11 = 0x83
1357  0000              
1358  0000              defc __IO_PIO_CNTL_12 = 0x98
1359  0000              defc __IO_PIO_CNTL_13 = 0x99
1360  0000              defc __IO_PIO_CNTL_14 = 0x9A
1361  0000              defc __IO_PIO_CNTL_15 = 0x9B
1362  0000              
1363  0000              
1364  0000              
1365  0000              
1366  0000              
1367  0000              
1368  0000              
1369  0000              
1370  0000              
1371  0000              PUBLIC __IO_APU_PORT_DATA
1372  0000              PUBLIC __IO_APU_PORT_CONTROL
1373  0000              PUBLIC __IO_APU_PORT_STATUS
1374  0000              
1375  0000              PUBLIC __IO_APU_STATUS_BUSY
1376  0000              PUBLIC __IO_APU_STATUS_SIGN
1377  0000              PUBLIC __IO_APU_STATUS_ZERO
1378  0000              PUBLIC __IO_APU_STATUS_DIV0
1379  0000              PUBLIC __IO_APU_STATUS_NEGRT
1380  0000              PUBLIC __IO_APU_STATUS_UNDFL
1381  0000              PUBLIC __IO_APU_STATUS_OVRFL
1382  0000              PUBLIC __IO_APU_STATUS_CARRY
1383  0000              
1384  0000              PUBLIC __IO_APU_STATUS_ERROR
1385  0000              
1386  0000              PUBLIC __IO_APU_COMMAND_SVREQ
1387  0000              
1388  0000              PUBLIC __IO_APU_OP_ENT
1389  0000              PUBLIC __IO_APU_OP_REM
1390  0000              PUBLIC __IO_APU_OP_ENT16
1391  0000              PUBLIC __IO_APU_OP_ENT32
1392  0000              PUBLIC __IO_APU_OP_REM16
1393  0000              PUBLIC __IO_APU_OP_REM32
1394  0000              
1395  0000              PUBLIC __IO_APU_OP_SADD
1396  0000              PUBLIC __IO_APU_OP_SSUB
1397  0000              PUBLIC __IO_APU_OP_SMUL
1398  0000              PUBLIC __IO_APU_OP_SMUU
1399  0000              PUBLIC __IO_APU_OP_SDIV
1400  0000              
1401  0000              PUBLIC __IO_APU_OP_DADD
1402  0000              PUBLIC __IO_APU_OP_DSUB
1403  0000              PUBLIC __IO_APU_OP_DMUL
1404  0000              PUBLIC __IO_APU_OP_DMUU
1405  0000              PUBLIC __IO_APU_OP_DDIV
1406  0000              
1407  0000              PUBLIC __IO_APU_OP_FADD
1408  0000              PUBLIC __IO_APU_OP_FSUB
1409  0000              PUBLIC __IO_APU_OP_FMUL
1410  0000              PUBLIC __IO_APU_OP_FDIV
1411  0000              
1412  0000              PUBLIC __IO_APU_OP_SQRT
1413  0000              PUBLIC __IO_APU_OP_SIN
1414  0000              PUBLIC __IO_APU_OP_COS
1415  0000              PUBLIC __IO_APU_OP_TAN
1416  0000              PUBLIC __IO_APU_OP_ASIN
1417  0000              PUBLIC __IO_APU_OP_ACOS
1418  0000              PUBLIC __IO_APU_OP_ATAN
1419  0000              PUBLIC __IO_APU_OP_LOG
1420  0000              PUBLIC __IO_APU_OP_LN
1421  0000              PUBLIC __IO_APU_OP_EXP
1422  0000              PUBLIC __IO_APU_OP_PWR
1423  0000              
1424  0000              PUBLIC __IO_APU_OP_NOP
1425  0000              PUBLIC __IO_APU_OP_FIXS
1426  0000              PUBLIC __IO_APU_OP_FIXD
1427  0000              PUBLIC __IO_APU_OP_FLTS
1428  0000              PUBLIC __IO_APU_OP_FLTD
1429  0000              PUBLIC __IO_APU_OP_CHSS
1430  0000              PUBLIC __IO_APU_OP_CHSD
1431  0000              PUBLIC __IO_APU_OP_PTOS
1432  0000              PUBLIC __IO_APU_OP_PTOD
1433  0000              PUBLIC __IO_APU_OP_PTOF
1434  0000              PUBLIC __IO_APU_OP_POPS
1435  0000              PUBLIC __IO_APU_OP_POPD
1436  0000              PUBLIC __IO_APU_OP_POPF
1437  0000              PUBLIC __IO_APU_OP_XCHS
1438  0000              PUBLIC __IO_APU_OP_XCHD
1439  0000              PUBLIC __IO_APU_OP_XCHF
1440  0000              PUBLIC __IO_APU_OP_PUPI
1441  0000              
1442  0000              
1443  0000              
1444  0000              
1445  0000              defc __IO_APU_PORT_DATA = 0xc000
1446  0000              defc __IO_APU_PORT_CONTROL = 0xc001
1447  0000              defc __IO_APU_PORT_STATUS = 0xc001
1448  0000              
1449  0000              defc __IO_APU_STATUS_BUSY = 0x80
1450  0000              defc __IO_APU_STATUS_SIGN = 0x40
1451  0000              defc __IO_APU_STATUS_ZERO = 0x20
1452  0000              defc __IO_APU_STATUS_DIV0 = 0x10
1453  0000              defc __IO_APU_STATUS_NEGRT = 0x08
1454  0000              defc __IO_APU_STATUS_UNDFL = 0x04
1455  0000              defc __IO_APU_STATUS_OVRFL = 0x02
1456  0000              defc __IO_APU_STATUS_CARRY = 0x01
1457  0000              
1458  0000              defc __IO_APU_STATUS_ERROR = 0x1E
1459  0000              
1460  0000              defc __IO_APU_COMMAND_SVREQ = 0x80
1461  0000              
1462  0000              defc __IO_APU_OP_ENT = 0x40
1463  0000              defc __IO_APU_OP_REM = 0x50
1464  0000              defc __IO_APU_OP_ENT16 = 0x40
1465  0000              defc __IO_APU_OP_ENT32 = 0x41
1466  0000              defc __IO_APU_OP_REM16 = 0x50
1467  0000              defc __IO_APU_OP_REM32 = 0x51
1468  0000              
1469  0000              defc __IO_APU_OP_SADD = 0x6C
1470  0000              defc __IO_APU_OP_SSUB = 0x6D
1471  0000              defc __IO_APU_OP_SMUL = 0x6E
1472  0000              defc __IO_APU_OP_SMUU = 0x76
1473  0000              defc __IO_APU_OP_SDIV = 0x6F
1474  0000              
1475  0000              defc __IO_APU_OP_DADD = 0x2C
1476  0000              defc __IO_APU_OP_DSUB = 0x2D
1477  0000              defc __IO_APU_OP_DMUL = 0x2E
1478  0000              defc __IO_APU_OP_DMUU = 0x36
1479  0000              defc __IO_APU_OP_DDIV = 0x2F
1480  0000              
1481  0000              defc __IO_APU_OP_FADD = 0x10
1482  0000              defc __IO_APU_OP_FSUB = 0x11
1483  0000              defc __IO_APU_OP_FMUL = 0x12
1484  0000              defc __IO_APU_OP_FDIV = 0x13
1485  0000              
1486  0000              defc __IO_APU_OP_SQRT = 0x01
1487  0000              defc __IO_APU_OP_SIN = 0x02
1488  0000              defc __IO_APU_OP_COS = 0x03
1489  0000              defc __IO_APU_OP_TAN = 0x04
1490  0000              defc __IO_APU_OP_ASIN = 0x05
1491  0000              defc __IO_APU_OP_ACOS = 0x06
1492  0000              defc __IO_APU_OP_ATAN = 0x07
1493  0000              defc __IO_APU_OP_LOG = 0x08
1494  0000              defc __IO_APU_OP_LN = 0x09
1495  0000              defc __IO_APU_OP_EXP = 0x0A
1496  0000              defc __IO_APU_OP_PWR = 0x0B
1497  0000              
1498  0000              defc __IO_APU_OP_NOP = 0x00
1499  0000              defc __IO_APU_OP_FIXS = 0x1F
1500  0000              defc __IO_APU_OP_FIXD = 0x1E
1501  0000              defc __IO_APU_OP_FLTS = 0x1D
1502  0000              defc __IO_APU_OP_FLTD = 0x1C
1503  0000              defc __IO_APU_OP_CHSS = 0x74
1504  0000              defc __IO_APU_OP_CHSD = 0x34
1505  0000              defc __IO_APU_OP_PTOS = 0x15
1506  0000              defc __IO_APU_OP_PTOD = 0x37
1507  0000              defc __IO_APU_OP_PTOF = 0x17
1508  0000              defc __IO_APU_OP_POPS = 0x78
1509  0000              defc __IO_APU_OP_POPD = 0x38
1510  0000              defc __IO_APU_OP_POPF = 0x18
1511  0000              defc __IO_APU_OP_XCHS = 0x79
1512  0000              defc __IO_APU_OP_XCHD = 0x39
1513  0000              defc __IO_APU_OP_XCHF = 0x19
1514  0000              defc __IO_APU_OP_PUPI = 0x1A
1515  0000              
1516  0000              
1517  0000              
1518  0000              
1519  0000              
1520  0000              
1521  0000              
1522  0000              
1523  0000              
1524  0000              PUBLIC __IO_I2C_RX_SIZE
1525  0000              PUBLIC __IO_I2C_TX_SIZE
1526  0000              
1527  0000              PUBLIC __IO_I2C1_PORT_MSB
1528  0000              PUBLIC __IO_I2C2_PORT_MSB
1529  0000              
1530  0000              PUBLIC __IO_I2C_PORT_STA
1531  0000              PUBLIC __IO_I2C_PORT_IPTR
1532  0000              PUBLIC __IO_I2C_PORT_DAT
1533  0000              PUBLIC __IO_I2C_PORT_IDATA
1534  0000              PUBLIC __IO_I2C_PORT_CON
1535  0000              
1536  0000              PUBLIC __IO_I2C_PORT_ICOUNT
1537  0000              PUBLIC __IO_I2C_PORT_IADDR
1538  0000              PUBLIC __IO_I2C_PORT_ISCLL
1539  0000              PUBLIC __IO_I2C_PORT_ISCLH
1540  0000              PUBLIC __IO_I2C_PORT_ITO
1541  0000              PUBLIC __IO_I2C_PORT_IPRESET
1542  0000              PUBLIC __IO_I2C_PORT_IMODE
1543  0000              
1544  0000              PUBLIC __IO_I2C_STA_ILLEGAL_START_STOP
1545  0000              PUBLIC __IO_I2C_STA_MASTER_START_TX
1546  0000              PUBLIC __IO_I2C_STA_MASTER_RESTART_TX
1547  0000              PUBLIC __IO_I2C_STA_MASTER_SLA_W_ACK
1548  0000              PUBLIC __IO_I2C_STA_MASTER_SLA_W_NAK
1549  0000              PUBLIC __IO_I2C_STA_MASTER_DATA_W_ACK
1550  0000              PUBLIC __IO_I2C_STA_MASTER_DATA_W_NAK
1551  0000              PUBLIC __IO_I2C_STA_MASTER_ARB_LOST
1552  0000              PUBLIC __IO_I2C_STA_MASTER_SLA_R_ACK
1553  0000              PUBLIC __IO_I2C_STA_MASTER_SLA_R_NAK
1554  0000              PUBLIC __IO_I2C_STA_MASTER_DATA_R_ACK
1555  0000              PUBLIC __IO_I2C_STA_MASTER_DATA_R_NAK
1556  0000              PUBLIC __IO_I2C_STA_SLAVE_AD_W
1557  0000              PUBLIC __IO_I2C_STA_SLAVE_AL_AD_W
1558  0000              PUBLIC __IO_I2C_STA_SDA_STUCK
1559  0000              PUBLIC __IO_I2C_STA_SCL_STUCK
1560  0000              PUBLIC __IO_I2C_STA_SLAVE_DATA_RX_ACK
1561  0000              PUBLIC __IO_I2C_STA_SLAVE_DATA_RX_NAK
1562  0000              PUBLIC __IO_I2C_STA_SLAVE_STOP_OR_RESTART
1563  0000              PUBLIC __IO_I2C_STA_SLAVE_AD_R
1564  0000              PUBLIC __IO_I2C_STA_SLAVE_AL_AD_R
1565  0000              PUBLIC __IO_I2C_STA_SLAVE_DATA_TX_ACK
1566  0000              PUBLIC __IO_I2C_STA_SLAVE_DATA_TX_NAK
1567  0000              PUBLIC __IO_I2C_STA_SLAVE_LST_TX_ACK
1568  0000              PUBLIC __IO_I2C_STA_SLAVE_GC
1569  0000              PUBLIC __IO_I2C_STA_SLAVE_GC_AL
1570  0000              PUBLIC __IO_I2C_STA_SLAVE_GC_RX_ACK
1571  0000              PUBLIC __IO_I2C_STA_SLAVE_GC_RX_NAK
1572  0000              PUBLIC __IO_I2C_STA_IDLE
1573  0000              PUBLIC __IO_I2C_STA_ILLEGAL_ICOUNT
1574  0000              
1575  0000              PUBLIC __IO_I2C_CON_AA
1576  0000              PUBLIC __IO_I2C_CON_ENSIO
1577  0000              PUBLIC __IO_I2C_CON_STA
1578  0000              PUBLIC __IO_I2C_CON_STO
1579  0000              PUBLIC __IO_I2C_CON_SI
1580  0000              PUBLIC __IO_I2C_CON_MODE
1581  0000              
1582  0000              PUBLIC __IO_I2C_CON_ECHO_BUS_STOPPED
1583  0000              PUBLIC __IO_I2C_CON_ECHO_BUS_RESTART
1584  0000              PUBLIC __IO_I2C_CON_ECHO_BUS_ILLEGAL
1585  0000              
1586  0000              PUBLIC __IO_I2C_ICOUNT_LB
1587  0000              
1588  0000              PUBLIC __IO_I2C_ITO_TE
1589  0000              
1590  0000              PUBLIC __IO_I2C_IMODE_STD
1591  0000              PUBLIC __IO_I2C_IMODE_FAST
1592  0000              PUBLIC __IO_I2C_IMODE_FASTP
1593  0000              PUBLIC __IO_I2C_IMODE_TURBO
1594  0000              PUBLIC __IO_I2C_IMODE_CR
1595  0000              
1596  0000              
1597  0000              
1598  0000              
1599  0000              defc __IO_I2C_RX_SIZE = 68
1600  0000              defc __IO_I2C_TX_SIZE = 68
1601  0000              
1602  0000              defc __IO_I2C1_PORT_MSB = 0xa0
1603  0000              defc __IO_I2C2_PORT_MSB = 0x80
1604  0000              
1605  0000              defc __IO_I2C_PORT_STA = 0x00
1606  0000              defc __IO_I2C_PORT_IPTR = 0x00
1607  0000              defc __IO_I2C_PORT_DAT = 0x01
1608  0000              defc __IO_I2C_PORT_IDATA = 0x02
1609  0000              defc __IO_I2C_PORT_CON = 0x03
1610  0000              
1611  0000              defc __IO_I2C_PORT_ICOUNT = 0x00
1612  0000              defc __IO_I2C_PORT_IADDR = 0x01
1613  0000              defc __IO_I2C_PORT_ISCLL = 0x02
1614  0000              defc __IO_I2C_PORT_ISCLH = 0x03
1615  0000              defc __IO_I2C_PORT_ITO = 0x04
1616  0000              defc __IO_I2C_PORT_IPRESET = 0x05
1617  0000              defc __IO_I2C_PORT_IMODE = 0x06
1618  0000              
1619  0000              defc __IO_I2C_STA_ILLEGAL_START_STOP = 0x00
1620  0000              defc __IO_I2C_STA_MASTER_START_TX = 0x08
1621  0000              defc __IO_I2C_STA_MASTER_RESTART_TX = 0x10
1622  0000              defc __IO_I2C_STA_MASTER_SLA_W_ACK = 0x18
1623  0000              defc __IO_I2C_STA_MASTER_SLA_W_NAK = 0x20
1624  0000              defc __IO_I2C_STA_MASTER_DATA_W_ACK = 0x28
1625  0000              defc __IO_I2C_STA_MASTER_DATA_W_NAK = 0x30
1626  0000              defc __IO_I2C_STA_MASTER_ARB_LOST = 0x38
1627  0000              defc __IO_I2C_STA_MASTER_SLA_R_ACK = 0x40
1628  0000              defc __IO_I2C_STA_MASTER_SLA_R_NAK = 0x48
1629  0000              defc __IO_I2C_STA_MASTER_DATA_R_ACK = 0x50
1630  0000              defc __IO_I2C_STA_MASTER_DATA_R_NAK = 0x58
1631  0000              defc __IO_I2C_STA_SLAVE_AD_W = 0x60
1632  0000              defc __IO_I2C_STA_SLAVE_AL_AD_W = 0x68
1633  0000              defc __IO_I2C_STA_SDA_STUCK = 0x70
1634  0000              defc __IO_I2C_STA_SCL_STUCK = 0x78
1635  0000              defc __IO_I2C_STA_SLAVE_DATA_RX_ACK = 0x80
1636  0000              defc __IO_I2C_STA_SLAVE_DATA_RX_NAK = 0x88
1637  0000              defc __IO_I2C_STA_SLAVE_STOP_OR_RESTART = 0xA0
1638  0000              defc __IO_I2C_STA_SLAVE_AD_R = 0xA8
1639  0000              defc __IO_I2C_STA_SLAVE_AL_AD_R = 0xB0
1640  0000              defc __IO_I2C_STA_SLAVE_DATA_TX_ACK = 0xB8
1641  0000              defc __IO_I2C_STA_SLAVE_DATA_TX_NAK = 0xC0
1642  0000              defc __IO_I2C_STA_SLAVE_LST_TX_ACK = 0xC8
1643  0000              defc __IO_I2C_STA_SLAVE_GC = 0xD0
1644  0000              defc __IO_I2C_STA_SLAVE_GC_AL = 0xD8
1645  0000              defc __IO_I2C_STA_SLAVE_GC_RX_ACK = 0xE0
1646  0000              defc __IO_I2C_STA_SLAVE_GC_RX_NAK = 0xE8
1647  0000              defc __IO_I2C_STA_IDLE = 0xF8
1648  0000              defc __IO_I2C_STA_ILLEGAL_ICOUNT = 0xFC
1649  0000              
1650  0000              defc __IO_I2C_CON_AA = 0x80
1651  0000              defc __IO_I2C_CON_ENSIO = 0x40
1652  0000              defc __IO_I2C_CON_STA = 0x20
1653  0000              defc __IO_I2C_CON_STO = 0x10
1654  0000              defc __IO_I2C_CON_SI = 0x08
1655  0000              defc __IO_I2C_CON_MODE = 0x01
1656  0000              
1657  0000              defc __IO_I2C_CON_ECHO_BUS_STOPPED = 0x10
1658  0000              defc __IO_I2C_CON_ECHO_BUS_RESTART = 0x04
1659  0000              defc __IO_I2C_CON_ECHO_BUS_ILLEGAL = 0x02
1660  0000              
1661  0000              defc __IO_I2C_ICOUNT_LB = 0x80
1662  0000              
1663  0000              defc __IO_I2C_ITO_TE = 0x80
1664  0000              
1665  0000              defc __IO_I2C_IMODE_STD = 0x00
1666  0000              defc __IO_I2C_IMODE_FAST = 0x01
1667  0000              defc __IO_I2C_IMODE_FASTP = 0x02
1668  0000              defc __IO_I2C_IMODE_TURBO = 0x03
1669  0000              defc __IO_I2C_IMODE_CR = 0x07
1670  0000              
1671  0000              
1672  0000              
1673  0000              
1674  0000              
1675  0000              
1676  0000              
1677  0000              
1678  0000              
1679  0000              
1680  0000              PUBLIC __IO_PIO_IDE_LSB
1681  0000              PUBLIC __IO_PIO_IDE_MSB
1682  0000              PUBLIC __IO_PIO_IDE_CTL
1683  0000              PUBLIC __IO_PIO_IDE_CONFIG
1684  0000              PUBLIC __IO_PIO_IDE_RD
1685  0000              PUBLIC __IO_PIO_IDE_WR
1686  0000              
1687  0000              PUBLIC __IO_IDE_A0_LINE
1688  0000              PUBLIC __IO_IDE_A1_LINE
1689  0000              PUBLIC __IO_IDE_A2_LINE
1690  0000              PUBLIC __IO_IDE_CS0_LINE
1691  0000              PUBLIC __IO_IDE_CS1_LINE
1692  0000              PUBLIC __IO_IDE_WR_LINE
1693  0000              PUBLIC __IO_IDE_RD_LINE
1694  0000              PUBLIC __IO_IDE_RST_LINE
1695  0000              
1696  0000              PUBLIC __IO_IDE_DATA
1697  0000              PUBLIC __IO_IDE_ERROR
1698  0000              PUBLIC __IO_IDE_SEC_CNT
1699  0000              PUBLIC __IO_IDE_SECTOR
1700  0000              PUBLIC __IO_IDE_CYL_LSB
1701  0000              PUBLIC __IO_IDE_CYL_MSB
1702  0000              PUBLIC __IO_IDE_HEAD
1703  0000              PUBLIC __IO_IDE_COMMAND
1704  0000              PUBLIC __IO_IDE_STATUS
1705  0000              
1706  0000              PUBLIC __IO_IDE_CONTROL
1707  0000              PUBLIC __IO_IDE_ALT_STATUS
1708  0000              
1709  0000              PUBLIC __IO_IDE_LBA0
1710  0000              PUBLIC __IO_IDE_LBA1
1711  0000              PUBLIC __IO_IDE_LBA2
1712  0000              PUBLIC __IO_IDE_LBA3
1713  0000              
1714  0000              PUBLIC __IDE_CMD_READ
1715  0000              PUBLIC __IDE_CMD_WRITE
1716  0000              
1717  0000              PUBLIC __IDE_CMD_STANDBY
1718  0000              PUBLIC __IDE_CMD_IDLE
1719  0000              PUBLIC __IDE_CMD_SLEEP
1720  0000              PUBLIC __IDE_CMD_CACHE_FLUSH
1721  0000              PUBLIC __IDE_CMD_ID
1722  0000              
1723  0000              
1724  0000              
1725  0000              
1726  0000              defc __IO_PIO_IDE_LSB = 0x4000
1727  0000              defc __IO_PIO_IDE_MSB = 0x4001
1728  0000              defc __IO_PIO_IDE_CTL = 0x4002
1729  0000              defc __IO_PIO_IDE_CONFIG = 0x4003
1730  0000              defc __IO_PIO_IDE_RD = 0x92
1731  0000              defc __IO_PIO_IDE_WR = 0x80
1732  0000              
1733  0000              defc __IO_IDE_A0_LINE = 0x10
1734  0000              defc __IO_IDE_A1_LINE = 0x04
1735  0000              defc __IO_IDE_A2_LINE = 0x40
1736  0000              defc __IO_IDE_CS0_LINE = 0x08
1737  0000              defc __IO_IDE_CS1_LINE = 0x20
1738  0000              defc __IO_IDE_WR_LINE = 0x01
1739  0000              defc __IO_IDE_RD_LINE = 0x02
1740  0000              defc __IO_IDE_RST_LINE = 0x80
1741  0000              
1742  0000              defc __IO_IDE_DATA = 0x08
1743  0000              defc __IO_IDE_ERROR = 0x18
1744  0000              defc __IO_IDE_SEC_CNT = 0xc
1745  0000              defc __IO_IDE_SECTOR = 0x1c
1746  0000              defc __IO_IDE_CYL_LSB = 0x48
1747  0000              defc __IO_IDE_CYL_MSB = 0x58
1748  0000              defc __IO_IDE_HEAD = 0x4c
1749  0000              defc __IO_IDE_COMMAND = 0x5c
1750  0000              defc __IO_IDE_STATUS = 0x5c
1751  0000              
1752  0000              defc __IO_IDE_CONTROL = 0x64
1753  0000              defc __IO_IDE_ALT_STATUS = 0x64
1754  0000              
1755  0000              defc __IO_IDE_LBA0 = 0x1c
1756  0000              defc __IO_IDE_LBA1 = 0x48
1757  0000              defc __IO_IDE_LBA2 = 0x58
1758  0000              defc __IO_IDE_LBA3 = 0x4c
1759  0000              
1760  0000              defc __IDE_CMD_READ = 0x20
1761  0000              defc __IDE_CMD_WRITE = 0x30
1762  0000              
1763  0000              defc __IDE_CMD_STANDBY = 0xE0
1764  0000              defc __IDE_CMD_IDLE = 0xE1
1765  0000              defc __IDE_CMD_SLEEP = 0xE6
1766  0000              defc __IDE_CMD_CACHE_FLUSH = 0xE7
1767  0000              defc __IDE_CMD_ID = 0xEC
1768  0000              
1769  0000              
1770  0000              
1771  0000              
1772  0000              
1773  0000              
1774  0000              
1775  0000              
1776  0000              
1777  0000              
1778  0000              
1779  0000              ENDIF
1780  0000              
1781  0000              
67    0000              
68    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
69    0000              ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
70    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              
72    0000              include "../crt_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ; crt configuration
7     0000              
8     0000                 defc DEF__crt_org_code              = 0       ;; org of code section
9     0000                 defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
10    0000                 defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
11    0000              
12    0000                 defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
13    0000                 defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
14    0000              
15    0000                 defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
16    0000                 defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
17    0000              
18    0000                 defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
19    0000              
20    0000                 defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
21    0000              
22    0000                 defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
23    0000                 defc DEF__crt_io_vector_base        = 0       ;; io vector base address for z180 internal peripherals
24    0000                 defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
25    0000              
26    0000                 defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
27    0000                 defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
28    0000                 defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
29    0000              
30    0000                 defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
31    0000                 defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
32    0000              
33    0000                 defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
34    0000                 defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
35    0000                 defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and Z180 target, a jump to user code to service traps is inserted
36    0000              
37    0000                 ; clib defaults
38    0000              
39    0000                 defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
40    0000                 defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
41    0000              
42    0000                 defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
43    0000                 defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
44    0000              
45    0000                 defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
46    0000              
47    0000                 defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
48    0000                 defc DEF__clib_open_max             = 8       ;; max number of open files
49    0000              
50    0000              ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
51    0000              
73    0000              include "crt_config.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __CRTCFG = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "crt_cfg.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __CRTCFG = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; yabios model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 defc TAR__crt_org_code              = 0
23    0000                 defc TAR__crt_org_data              = 0xC000
24    0000                 defc TAR__crt_org_bss               = -1
25    0000              
26    0000                 defc TAR__crt_model                 = 2
27    0000              
28    0000                 defc TAR__register_sp               = 0xFFDE
29    0000                 defc TAR__crt_stack_size            = 512
30    0000              
31    0000                 defc TAR__crt_initialize_bss        = 1
32    0000              
33    0000                 defc TAR__crt_include_preamble      = 1
34    0000              
35    0000                 defc TAR__crt_org_vector_table      = 0xFFE0
36    0000                 defc TAR__crt_io_vector_base        = 0x00
37    0000              
38    0000                 defc TAR__crt_interrupt_mode        = 1
39    0000              
40    0000                 defc TAR__crt_enable_commandline    = 0
41    0000                 defc TAR__crt_enable_restart        = 0
42    0000                 defc TAR__crt_enable_close          = 1
43    0000              
44    0000                 defc TAR__crt_enable_eidi           = 0x13
45    0000                 defc TAR__crt_on_exit               = 0x00001
46    0000              
47    0000                 defc TAR__crt_enable_rst            = 0x00FE
48    0000                 defc TAR__crt_enable_nmi            = 0
49    0000                 defc TAR__crt_enable_trap           = 1
50    0000              
51    0000                 ; clib defaults
52    0000              
53    0000                 defc TAR__clib_exit_stack_size      = 0
54    0000                 defc TAR__clib_quickexit_stack_size = 0
55    0000              
56    0000                 defc TAR__clib_malloc_heap_size     = 4096
57    0000                 defc TAR__clib_stdio_heap_size      = 128
58    0000              
59    0000                 defc TAR__clib_balloc_table_size    = 0
60    0000              
61    0000                 defc TAR__clib_fopen_max            = 0
62    0000                 defc TAR__clib_open_max             = 0
63    0000              
64    0000              ENDIF
65    0000              
66    0000              IF __CRTCFG = 1
67    0000              
68    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
69    0000                 ;; basic driver model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
70    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              
72    0000                 defc TAR__crt_org_code              = 0x2900
73    0000                 defc TAR__crt_org_data              = 0
74    0000                 defc TAR__crt_org_bss               = -1
75    0000              
76    0000                 defc TAR__crt_model                 = 0
77    0000              
78    0000                 defc TAR__register_sp               = -1
79    0000                 defc TAR__crt_stack_size            = 512
80    0000              
81    0000                 defc TAR__crt_initialize_bss        = 1
82    0000              
83    0000                 defc TAR__crt_include_preamble      = 0
84    0000              
85    0000                 defc TAR__crt_org_vector_table      = 0
86    0000                 defc TAR__crt_io_vector_base        = -1
87    0000                 defc TAR__crt_interrupt_mode        = -1
88    0000              
89    0000                 defc TAR__crt_enable_commandline    = 0
90    0000                 defc TAR__crt_enable_restart        = 0
91    0000                 defc TAR__crt_enable_close          = 1
92    0000              
93    0000                 defc TAR__crt_enable_eidi           = 0x20
94    0000                 defc TAR__crt_on_exit               = 0x10002
95    0000              
96    0000                 defc TAR__crt_enable_rst            = 0
97    0000                 defc TAR__crt_enable_nmi            = 0
98    0000                 defc TAR__crt_enable_trap           = 0
99    0000              
100   0000                 ; clib defaults
101   0000              
102   0000                 defc TAR__clib_exit_stack_size      = 0
103   0000                 defc TAR__clib_quickexit_stack_size = 0
104   0000              
105   0000                 defc TAR__clib_malloc_heap_size     = -1
106   0000                 defc TAR__clib_stdio_heap_size      = 128
107   0000              
108   0000                 defc TAR__clib_balloc_table_size    = 0
109   0000              
110   0000                 defc TAR__clib_fopen_max            = 0
111   0000                 defc TAR__clib_open_max             = 0
112   0000              
113   0000              ENDIF
114   0000              
115   0000              IF __CRTCFG = 2
116   0000              
117   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
118   0000                 ;; no drivers model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
119   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
120   0000              
121   0000                 defc TAR__crt_org_code              = 0x0100
122   0000                 defc TAR__crt_org_data              = 0
123   0000                 defc TAR__crt_org_bss               = -1
124   0000              
125   0000                 defc TAR__crt_model                 = 0
126   0000              
127   0000                 defc TAR__register_sp               = -1
128   0000                 defc TAR__crt_stack_size            = 512
129   0000              
130   0000                 defc TAR__crt_initialize_bss        = 1
131   0000              
132   0000                 defc TAR__crt_include_preamble      = 0
133   0000              
134   0000                 defc TAR__crt_org_vector_table      = 0
135   0000                 defc TAR__crt_io_vector_base        = -1
136   0000                 defc TAR__crt_interrupt_mode        = -1
137   0000              
138   0000                 defc TAR__crt_enable_commandline    = 0
139   0000                 defc TAR__crt_enable_restart        = 0
140   0000                 defc TAR__crt_enable_close          = 1
141   0000              
142   0000                 defc TAR__crt_enable_eidi           = 0x11
143   0000                 defc TAR__crt_on_exit               = 0x10001
144   0000              
145   0000                 defc TAR__crt_enable_rst            = 0
146   0000                 defc TAR__crt_enable_nmi            = 0
147   0000                 defc TAR__crt_enable_trap           = 0
148   0000              
149   0000                 ; clib defaults
150   0000              
151   0000                 defc TAR__clib_exit_stack_size      = 0
152   0000                 defc TAR__clib_quickexit_stack_size = 0
153   0000              
154   0000                 defc TAR__clib_malloc_heap_size     = -1
155   0000                 defc TAR__clib_stdio_heap_size      = 128
156   0000              
157   0000                 defc TAR__clib_balloc_table_size    = 0
158   0000              
159   0000                 defc TAR__clib_fopen_max            = 0
160   0000                 defc TAR__clib_open_max             = 0
161   0000              
162   0000              ENDIF
163   0000              
164   0000              ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
165   0000              
74    0000              
75    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
76    0000              ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
77    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
78    0000              
79    0000              
80    0000                 IFDEF CRT_ORG_CODE
81    0000              
82    0000                    defc __crt_org_code = CRT_ORG_CODE
83    0000              
84    0000                 ELSE
85    0000              
86    0000                    IFDEF TAR__crt_org_code
87    0000              
88    0000                       defc __crt_org_code = TAR__crt_org_code
89    0000              
90    0000                    ELSE
91    0000              
92    0000                       defc __crt_org_code = DEF__crt_org_code
93    0000              
94    0000                    ENDIF
95    0000              
96    0000                 ENDIF
97    0000              
98    0000                 IFDEF REGISTER_SP
99    0000              
100   0000                    defc __register_sp = REGISTER_SP
101   0000              
102   0000                 ELSE
103   0000              
104   0000                    IFDEF STACKPTR
105   0000              
106   0000                       defc __register_sp = STACKPTR
107   0000              
108   0000                    ELSE
109   0000              
110   0000                       IFDEF TAR__register_sp
111   0000              
112   0000                          defc __register_sp = TAR__register_sp
113   0000              
114   0000                       ELSE
115   0000              
116   0000                          defc __register_sp = DEF__register_sp
117   0000              
118   0000                       ENDIF
119   0000              
120   0000                    ENDIF
121   0000              
122   0000                 ENDIF
123   0000              
124   0000              
125   0000                 IFDEF CRT_STACK_SIZE
126   0000              
127   0000                    defc __crt_stack_size = CRT_STACK_SIZE
128   0000              
129   0000                 ELSE
130   0000              
131   0000                    IFDEF TAR__crt_stack_size
132   0000              
133   0000                       defc __crt_stack_size = TAR__crt_stack_size
134   0000              
135   0000                    ELSE
136   0000              
137   0000                       defc __crt_stack_size = DEF__crt_stack_size
138   0000              
139   0000                    ENDIF
140   0000              
141   0000                 ENDIF
142   0000              
143   0000              
144   0000                 IFDEF CRT_ORG_DATA
145   0000              
146   0000                    defc __crt_org_data = CRT_ORG_DATA
147   0000              
148   0000                 ELSE
149   0000              
150   0000                    IFDEF TAR__crt_org_data
151   0000              
152   0000                       defc __crt_org_data = TAR__crt_org_data
153   0000              
154   0000                    ELSE
155   0000              
156   0000                       defc __crt_org_data = DEF__crt_org_data
157   0000              
158   0000                    ENDIF
159   0000              
160   0000                 ENDIF
161   0000              
162   0000              
163   0000                 IFDEF CRT_ORG_BSS
164   0000              
165   0000                    defc __crt_org_bss = CRT_ORG_BSS
166   0000              
167   0000                 ELSE
168   0000              
169   0000                    IFDEF TAR__crt_org_bss
170   0000              
171   0000                       defc __crt_org_bss = TAR__crt_org_bss
172   0000              
173   0000                    ELSE
174   0000              
175   0000                       defc __crt_org_bss = DEF__crt_org_bss
176   0000              
177   0000                    ENDIF
178   0000              
179   0000                 ENDIF
180   0000              
181   0000              
182   0000                 IFDEF CRT_MODEL
183   0000              
184   0000                    defc __crt_model = CRT_MODEL
185   0000              
186   0000                 ELSE
187   0000              
188   0000                    IFDEF TAR__crt_model
189   0000              
190   0000                       defc __crt_model = TAR__crt_model
191   0000              
192   0000                    ELSE
193   0000              
194   0000                       defc __crt_model = DEF__crt_model
195   0000              
196   0000                    ENDIF
197   0000              
198   0000                 ENDIF
199   0000              
200   0000                 IFDEF CRT_INITIALIZE_BSS
201   0000              
202   0000                    defc __crt_initialize_bss = CRT_INITIALIZE_BSS
203   0000              
204   0000                 ELSE
205   0000              
206   0000                    IFDEF TAR__crt_initialize_bss
207   0000              
208   0000                       defc __crt_initialize_bss = TAR__crt_initialize_bss
209   0000              
210   0000                    ELSE
211   0000              
212   0000                       defc __crt_initialize_bss = DEF__crt_initialize_bss
213   0000              
214   0000                    ENDIF
215   0000              
216   0000                 ENDIF
217   0000              
218   0000              
219   0000                 IFDEF CRT_INCLUDE_PREAMBLE
220   0000              
221   0000                    defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
222   0000              
223   0000                 ELSE
224   0000              
225   0000                    IFDEF TAR__crt_include_preamble
226   0000              
227   0000                       defc __crt_include_preamble = TAR__crt_include_preamble
228   0000              
229   0000                    ELSE
230   0000              
231   0000                       defc __crt_include_preamble = DEF__crt_include_preamble
232   0000              
233   0000                    ENDIF
234   0000              
235   0000                 ENDIF
236   0000              
237   0000                 IFDEF CRT_ORG_VECTOR_TABLE
238   0000              
239   0000                    defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
240   0000              
241   0000                 ELSE
242   0000              
243   0000                    IFDEF TAR__crt_org_vector_table
244   0000              
245   0000                       defc __crt_org_vector_table = TAR__crt_org_vector_table
246   0000              
247   0000                    ELSE
248   0000              
249   0000                       defc __crt_org_vector_table = DEF__crt_org_vector_table
250   0000              
251   0000                    ENDIF
252   0000              
253   0000                 ENDIF
254   0000              
255   0000              IF __Z180
256   0000              
257   0000                 IFDEF CRT_IO_VECTOR_BASE
258   0000              
259   0000                    defc __crt_io_vector_base = CRT_IO_VECTOR_BASE
260   0000              
261   0000                 ELSE
262   0000              
263   0000                    IFDEF TAR__crt_io_vector_base
264   0000              
265   0000                       defc __crt_io_vector_base = TAR__crt_io_vector_base
266   0000              
267   0000                    ELSE
268   0000              
269   0000                       defc __crt_io_vector_base = DEF__crt_io_vector_base
270   0000              
271   0000                    ENDIF
272   0000              
273   0000                 ENDIF
274   0000              
275   0000              ENDIF
276   0000              
277   0000                 IFDEF CRT_INTERRUPT_MODE
278   0000              
279   0000                    defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
280   0000              
281   0000                 ELSE
282   0000              
283   0000                    IFDEF TAR__crt_interrupt_mode
284   0000              
285   0000                       defc __crt_interrupt_mode = TAR__crt_interrupt_mode
286   0000              
287   0000                    ELSE
288   0000              
289   0000                       defc __crt_interrupt_mode = DEF__crt_interrupt_mode
290   0000              
291   0000                    ENDIF
292   0000              
293   0000                 ENDIF
294   0000              
295   0000              
296   0000                 IFDEF CRT_ENABLE_COMMANDLINE
297   0000              
298   0000                    defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
299   0000              
300   0000                 ELSE
301   0000              
302   0000                    IFDEF TAR__crt_enable_commandline
303   0000              
304   0000                       defc __crt_enable_commandline = TAR__crt_enable_commandline
305   0000              
306   0000                    ELSE
307   0000              
308   0000                       defc __crt_enable_commandline = DEF__crt_enable_commandline
309   0000              
310   0000                    ENDIF
311   0000              
312   0000                 ENDIF
313   0000              
314   0000              
315   0000                 IFDEF CRT_ENABLE_RESTART
316   0000              
317   0000                    defc __crt_enable_restart = CRT_ENABLE_RESTART
318   0000              
319   0000                 ELSE
320   0000              
321   0000                    IFDEF TAR__crt_enable_restart
322   0000              
323   0000                       defc __crt_enable_restart = TAR__crt_enable_restart
324   0000              
325   0000                    ELSE
326   0000              
327   0000                       defc __crt_enable_restart = DEF__crt_enable_restart
328   0000              
329   0000                    ENDIF
330   0000              
331   0000                 ENDIF
332   0000              
333   0000              
334   0000                 IFDEF CRT_ENABLE_CLOSE
335   0000              
336   0000                    defc __crt_enable_close = CRT_ENABLE_CLOSE
337   0000              
338   0000                 ELSE
339   0000              
340   0000                    IFDEF TAR__crt_enable_close
341   0000              
342   0000                       defc __crt_enable_close = TAR__crt_enable_close
343   0000              
344   0000                    ELSE
345   0000              
346   0000                       defc __crt_enable_close = DEF__crt_enable_close
347   0000              
348   0000                    ENDIF
349   0000              
350   0000                 ENDIF
351   0000              
352   0000              
353   0000                 IFDEF CRT_ENABLE_EIDI
354   0000              
355   0000                    defc __crt_enable_eidi = CRT_ENABLE_EIDI
356   0000              
357   0000                 ELSE
358   0000              
359   0000                    IFDEF TAR__crt_enable_eidi
360   0000              
361   0000                       defc __crt_enable_eidi = TAR__crt_enable_eidi
362   0000              
363   0000                    ELSE
364   0000              
365   0000                       defc __crt_enable_eidi = DEF__crt_enable_eidi
366   0000              
367   0000                    ENDIF
368   0000              
369   0000                 ENDIF
370   0000              
371   0000              
372   0000                 IF __crt_enable_restart
373   0000              
374   0000                    defc __crt_on_exit = 0x10008
375   0000              
376   0000                 ELSE
377   0000              
378   0000                    IFDEF CRT_ON_EXIT
379   0000              
380   0000                       defc __crt_on_exit = CRT_ON_EXIT
381   0000              
382   0000                    ELSE
383   0000              
384   0000                       IFDEF TAR__crt_on_exit
385   0000              
386   0000                          defc __crt_on_exit = TAR__crt_on_exit
387   0000              
388   0000                       ELSE
389   0000              
390   0000                          defc __crt_on_exit = DEF__crt_on_exit
391   0000              
392   0000                       ENDIF
393   0000              
394   0000                    ENDIF
395   0000              
396   0000                 ENDIF
397   0000              
398   0000              
399   0000                 IFDEF CLIB_EXIT_STACK_SIZE
400   0000              
401   0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
402   0000              
403   0000                 ELSE
404   0000              
405   0000                    IFDEF TAR__clib_exit_stack_size
406   0000              
407   0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
408   0000              
409   0000                    ELSE
410   0000              
411   0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
412   0000              
413   0000                    ENDIF
414   0000              
415   0000                 ENDIF
416   0000              
417   0000              
418   0000                 IFDEF CLIB_QUICKEXIT_STACK_SIZE
419   0000              
420   0000                    defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
421   0000              
422   0000                 ELSE
423   0000              
424   0000                    IFDEF TAR__clib_quickexit_stack_size
425   0000              
426   0000                       defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
427   0000              
428   0000                    ELSE
429   0000              
430   0000                       defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
431   0000              
432   0000                    ENDIF
433   0000              
434   0000                 ENDIF
435   0000              
436   0000              
437   0000                 IFDEF CLIB_MALLOC_HEAP_SIZE
438   0000              
439   0000                    defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
440   0000              
441   0000                 ELSE
442   0000              
443   0000                    IFDEF TAR__clib_malloc_heap_size
444   0000              
445   0000                       defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
446   0000              
447   0000                    ELSE
448   0000              
449   0000                       defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
450   0000              
451   0000                    ENDIF
452   0000              
453   0000                 ENDIF
454   0000              
455   0000              
456   0000                 IFDEF CLIB_STDIO_HEAP_SIZE
457   0000              
458   0000                    defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
459   0000              
460   0000                 ELSE
461   0000              
462   0000                    IFDEF TAR__clib_stdio_heap_size
463   0000              
464   0000                       defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
465   0000              
466   0000                    ELSE
467   0000              
468   0000                       defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
469   0000              
470   0000                    ENDIF
471   0000              
472   0000                 ENDIF
473   0000              
474   0000              
475   0000                 IFDEF CLIB_BALLOC_TABLE_SIZE
476   0000              
477   0000                    defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
478   0000              
479   0000                 ELSE
480   0000              
481   0000                    IFDEF TAR__clib_balloc_table_size
482   0000              
483   0000                       defc __clib_balloc_table_size = TAR__clib_balloc_table_size
484   0000              
485   0000                    ELSE
486   0000              
487   0000                       defc __clib_balloc_table_size = DEF__clib_balloc_table_size
488   0000              
489   0000                    ENDIF
490   0000              
491   0000                 ENDIF
492   0000              
493   0000              
494   0000                 IFDEF CLIB_FOPEN_MAX
495   0000              
496   0000                    defc __clib_fopen_max = CLIB_FOPEN_MAX
497   0000              
498   0000                 ELSE
499   0000              
500   0000                    IFDEF TAR__clib_fopen_max
501   0000              
502   0000                       defc __clib_fopen_max = TAR__clib_fopen_max
503   0000              
504   0000                    ELSE
505   0000              
506   0000                       defc __clib_fopen_max = DEF__clib_fopen_max
507   0000              
508   0000                    ENDIF
509   0000              
510   0000                 ENDIF
511   0000              
512   0000              
513   0000                 IFDEF CLIB_OPEN_MAX
514   0000              
515   0000                    defc __clib_open_max = CLIB_OPEN_MAX
516   0000              
517   0000                 ELSE
518   0000              
519   0000                    IFDEF TAR__clib_open_max
520   0000              
521   0000                       defc __clib_open_max = TAR__clib_open_max
522   0000              
523   0000                    ELSE
524   0000              
525   0000                       defc __clib_open_max = DEF__clib_open_max
526   0000              
527   0000                    ENDIF
528   0000              
529   0000                 ENDIF
530   0000              
531   0000              
532   0000                 IFDEF CRT_ENABLE_RST
533   0000              
534   0000                    defc __crt_enable_rst = CRT_ENABLE_RST
535   0000              
536   0000                 ELSE
537   0000              
538   0000                    IFDEF TAR__crt_enable_rst
539   0000              
540   0000                       defc __crt_enable_rst = TAR__crt_enable_rst
541   0000              
542   0000                    ELSE
543   0000              
544   0000                       defc __crt_enable_rst = DEF__crt_enable_rst
545   0000              
546   0000                    ENDIF
547   0000              
548   0000                 ENDIF
549   0000              
550   0000              
551   0000                 IFDEF CRT_ENABLE_NMI
552   0000              
553   0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
554   0000              
555   0000                 ELSE
556   0000              
557   0000                    IFDEF TAR__crt_enable_nmi
558   0000              
559   0000                       defc __crt_enable_nmi = TAR__crt_enable_nmi
560   0000              
561   0000                    ELSE
562   0000              
563   0000                       defc __crt_enable_nmi = DEF__crt_enable_nmi
564   0000              
565   0000                    ENDIF
566   0000              
567   0000                 ENDIF
568   0000              
569   0000                 IFDEF CRT_ENABLE_TRAP
570   0000              
571   0000                    defc __crt_enable_trap = CRT_ENABLE_TRAP
572   0000              
573   0000                 ELSE
574   0000              
575   0000                    IFDEF TAR__crt_enable_trap
576   0000              
577   0000                       defc __crt_enable_trap = TAR__crt_enable_trap
578   0000              
579   0000                    ELSE
580   0000              
581   0000                       defc __crt_enable_trap = DEF__crt_enable_trap
582   0000              
583   0000                    ENDIF
584   0000              
585   0000                 ENDIF
586   0000              
587   0000                 ;; rules that must be processed by m4
588   0000              
589   0000              
590   0000              
591   0000                 IFNDEF __crt_include_driver_instantiation
592   0000                    defc __crt_include_driver_instantiation = 0
593   0000                 ENDIF
594   0000              
595   0000                 ;; public definitions
596   0000              
597   0000                 PUBLIC __clib_fopen_max
598   0000                 PUBLIC __clib_open_max
599   0000              
600   0000                 PUBLIC __exit_stack_size
601   0000                 PUBLIC __quickexit_stack_size
602   0000              
603   0000                 defc __exit_stack_size = __clib_exit_stack_size
604   0000                 defc __quickexit_stack_size = __clib_quickexit_stack_size
605   0000              
606   0000                 IF __Z180
607   0000              
608   0000                    PUBLIC __IO_VECTOR_BASE
609   0000              
610   0000                    IF __crt_io_vector_base < 0
611   0000              
612   0000                       IF (__crt_org_vector_table < 0)
613   0000              
614   0000                          IF (-__crt_org_vector_table) & 0x1f
615   0000              
616   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
617   0000              
618   0000                          ELSE
619   0000              
620   0000                             defc __IO_VECTOR_BASE = (-__crt_org_vector_table) & 0xe0
621   0000              
622   0000                          ENDIF
623   0000              
624   0000                       ELSE
625   0000              
626   0000                          IF __crt_org_vector_table & 0x1f
627   0000              
628   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
629   0000              
630   0000                          ELSE
631   0000              
632   0000                             defc __IO_VECTOR_BASE = __crt_org_vector_table & 0xe0
633   0000              
634   0000                          ENDIF
635   0000              
636   0000                       ENDIF
637   0000              
638   0000                    ELSE
639   0000              
640   0000                       IF __crt_io_vector_base & 0x1f
641   0000              
642   0000                          "Illegal __IO_VECTOR_BASE"
643   0000              
644   0000                       ELSE
645   0000              
646   0000                          defc __IO_VECTOR_BASE = __crt_io_vector_base & 0xe0
647   0000              
648   0000                       ENDIF
649   0000              
650   0000                    ENDIF
651   0000              
652   0000                 ENDIF
653   0000              
654   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
655   0000              
656   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
657   0000              ;; crt rules for yaz180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
658   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
659   0000              
660   0000                 ; make the default SP location public
661   0000              
662   0000                 PUBLIC __register_sp
663   0000              
664   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
665   0000                 ; Input Terminal Settings
666   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
667   0000              
668   0000                 IFNDEF CRT_ITERM_TERMINAL_FLAGS
669   0000                    defc CRT_ITERM_TERMINAL_FLAGS = 0x03b0
670   0000                 ENDIF
671   0000              
672   0000                 ; buffer size must be available to m4 (requires special case in zcc)
673   0000              
674   0000              
675   0000              
676   0000                 IFNDEF CRT_ITERM_EDIT_BUFFER_SIZE
677   0000                    defc CRT_ITERM_EDIT_BUFFER_SIZE = 64
678   0000                 ENDIF
679   0000              
680   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
681   0000                 ; Output Terminal Settings
682   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
683   0000              
684   0000                 IFNDEF CRT_OTERM_TERMINAL_FLAGS
685   0000                    defc CRT_OTERM_TERMINAL_FLAGS = 0x2370
686   0000                 ENDIF
687   0000              
688   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
689   0000              
690   0000              
691   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
692   0000              ;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
693   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
694   0000              
695   0000              
696   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
697   0000              ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
698   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
699   0000              
700   0000              IF __MMAP = -1
701   0000              
702   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
703   0000                 ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
704   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
705   0000              
706   0000              
707   0000              
708   0000                 SECTION UNASSIGNED
709   0000                 org 0
710   0000              
711   0000              ENDIF
712   0000              
713   0000              IF __MMAP = 0
714   0000              
715   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
716   0000                 ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
717   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
718   0000              
719   0000                 INCLUDE "../crt_memory_model_z180.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              SECTION CODE
9     0000              
10    0000              org __crt_org_code
11    0000              
12    0000              IF (__crt_org_vector_table = -0x80) || (__crt_org_vector_table = -0x100)
13    0000              
14    0000              section interrupt_vectors
15    0000              
16    0000              ENDIF
17    0000              
18    0000              section code_crt_start
19    0000              section code_crt_init
20    0000              section code_crt_main
21    0000              section code_crt_exit
22    0000              section code_crt_return
23    0000              section code_crt_common
24    0000              
25    0000              IF (__crt_org_vector_table) && (__crt_org_vector_table != -0x80) && (__crt_org_vector_table != -0x100)
26    0000              
27    0000              section interrupt_vectors
28    0000              
29    0000              ENDIF
30    0000              
31    0000              section code_driver
32    0000              section code_font
33    0000              section code_clib
34    0000                include "../../clib_code.inc"
1     0000              
2     0000              ;; clib code segments ;;;;;;;;;
3     0000              
4     0000              section code_adt_b_array
5     0000              section code_adt_b_vector
6     0000              section code_adt_ba_priority_queue
7     0000              section code_adt_ba_stack
8     0000              section code_adt_bv_priority_queue
9     0000              section code_adt_bv_stack
10    0000              section code_adt_p_forward_list
11    0000              section code_adt_p_forward_list_alt
12    0000              section code_adt_p_list
13    0000              section code_adt_p_queue
14    0000              section code_adt_p_stack
15    0000              section code_adt_w_array
16    0000              section code_adt_w_vector
17    0000              section code_adt_wa_priority_queue
18    0000              section code_adt_wa_stack
19    0000              section code_adt_wv_priority_queue
20    0000              section code_adt_wv_stack
21    0000              section code_alloc_balloc
22    0000              section code_alloc_malloc
23    0000              section code_alloc_obstack
24    0000              section code_arch
25    0000              section code_bifrost_h
26    0000              section code_bifrost_l
27    0000              section code_bifrost2
28    0000              section code_compress_aplib
29    0000              section code_compress_zx7
30    0000              section code_ctype
31    0000              section code_driver_general
32    0000              section code_driver_character_input
33    0000              section code_driver_character_output
34    0000              section code_driver_memstream
35    0000              section code_driver_terminal_input
36    0000              section code_driver_terminal_output
37    0000              section code_driver_tty
38    0000              section code_error
39    0000              section code_esxdos
40    0000              section code_fcntl
41    0000              section code_font_fzx
42    0000              section code_fp_genmath
43    0000              section code_fp_math48
44    0000              section code_im2
45    0000              section code_input
46    0000              section code_inttypes
47    0000              section code_l
48    0000              section code_l_sccz80
49    0000              section code_l_sdcc
50    0000              section code_locale
51    0000              section code_math
52    0000              section code_network
53    0000              section code_nirvanam
54    0000              section code_nirvanap
55    0000              section code_PSGlib
56    0000              section code_setjmp
57    0000              section code_SMSlib
58    0000              section code_sound_bit
59    0000              section code_stdio
60    0000              section code_stdlib
61    0000              section code_string
62    0000              section code_temp_sp1
63    0000              section code_threads
64    0000              section code_threads_mutex
65    0000              section code_z180
66    0000              section code_z80
67    0000              
68    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
69    0000              
35    0000              section code_lib
36    0000              section code_compiler
37    0000              section code_user
38    0000              
39    0000              section rodata_driver
40    0000              section rodata_font
41    0000              section rodata_clib
42    0000                include "../../clib_rodata.inc"
1     0000              
2     0000              ;; clib rodata segments ;;;;;;;
3     0000              
4     0000              section rodata_arch
5     0000              section rodata_error_strings
6     0000              section rodata_error_string_end
7     0000  00          defb 0
8     0001              section rodata_fcntl
9     0000              section rodata_font_4x8
10    0000              section rodata_font_8x8
11    0000              section rodata_font_fzx
12    0000              section rodata_input
13    0000              section rodata_SMSlib
14    0000              section rodata_sound_bit
15    0000              section rodata_stdio
16    0000              section rodata_stdlib
17    0000              
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
43    0000                ;;section rodata_error_strings
44    0000                ;;section rodata_error_string_end
45    0000                ;;defb 0
46    0000              section rodata_lib
47    0000              section rodata_compiler
48    0000              
49    0000              section rodata_page0
50    0000              section rodata_common1_data
51    0000              section rodata_common1_driver
52    0000              
53    0000              section rodata_user
54    0000              
55    0000              SECTION CODE_END
56    0000              
57    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
58    0000              
59    0000              SECTION DATA
60    0000              
61    0000              IF __crt_org_data
62    0000              
63    0000                 org __crt_org_data
64    0000              
65    0000              ELSE
66    0000              
67    0000                 IF __crt_model
68    0000              
69    0000                    "DATA section address must be specified for rom models"
70    0000              
71    0000                 ENDIF
72    0000              
73    0000              ENDIF
74    0000              
75    0000              section data_align_256
76    0000              section data_align_128
77    0000              section data_align_64
78    0000              section data_align_32
79    0000              section data_align_16
80    0000              section data_align_8
81    0000              section data_align_4
82    0000              section data_align_2
83    0000              
84    0000              section smc_jump_vectors
85    0000              section smc_driver
86    0000              section smc_font
87    0000              section smc_clib
88    0000                include "../../clib_smc.inc"
1     0000              
2     0000              ;; clib self-modifying code ;;;
3     0000              
4     0000              section smc_fcntl
5     0000              section smc_l
6     0000              section smc_sound_bit
7     0000              
8     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
89    0000              section smc_lib
90    0000              section smc_compiler
91    0000              section smc_user
92    0000              
93    0000              section data_driver
94    0000              section data_font
95    0000              section data_clib
96    0000                include "../../clib_data.inc"
1     0000              
2     0000              ;; clib data segments ;;;;;;;;;
3     0000              
4     0000              section data_alloc_balloc
5     0000              section data_alloc_malloc
6     0000              section data_arch
7     0000              section data_fcntl
8     0000              section data_fcntl_stdio_heap_head
9     0000              section data_fcntl_stdio_heap_body
10    0000              section data_fcntl_stdio_heap_tail
11    0000              section data_fcntl_fdtable_body
12    0000              section data_PSGlib
13    0000              section data_SMSlib
14    0000              section data_sound_bit
15    0000              section data_stdio
16    0000              section data_stdlib
17    0000              section data_threads
18    0000              
19    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000              
97    0000                ;;section data_fcntl_stdio_heap_head
98    0000                ;;section data_fcntl_stdio_heap_body
99    0000                ;;section data_fcntl_stdio_heap_tail
100   0000                ;;section data_fcntl_fdtable_body
101   0000              section data_lib
102   0000              section data_compiler
103   0000              section data_user
104   0000              
105   0000              SECTION DATA_END
106   0000              
107   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
108   0000              
109   0000              SECTION BSS
110   0000              
111   0000              IF __crt_org_bss
112   0000              
113   0000                 org __crt_org_bss
114   0000              
115   0000              ELSE
116   0000              
117   0000                 IF __crt_model
118   0000              
119   0000                    org -1
120   0000              
121   0000                 ENDIF
122   0000              
123   0000              ENDIF
124   0000              
125   0000              section bss_align_256
126   0000              section bss_align_128
127   0000              section bss_align_64
128   0000              section bss_align_32
129   0000              section bss_align_16
130   0000              section bss_align_8
131   0000              section bss_align_4
132   0000              section bss_align_2
133   0000              
134   0000              section bss_driver
135   0000              section bss_font
136   0000              section bss_clib
137   0000                include "../../clib_bss.inc"
1     0000              
2     0000              ;; clib bss segments ;;;;;;;;;;
3     0000              
4     0000              section bss_arch
5     0000              section bss_alloc_balloc
6     0000              section bss_alloc_malloc
7     0000              section bss_compress_aplib
8     0000              section bss_error
9     0000              section bss_fcntl
10    0000              section bss_input
11    0000              section bss_PSGlib
12    0000              section bss_SMSlib
13    0000              section bss_sound_bit
14    0000              section bss_stdio
15    0000              section bss_stdlib
16    0000              section bss_string
17    0000              
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
138   0000              section bss_lib
139   0000              section bss_compiler
140   0000              section bss_user
141   0000              
142   0000              section BSS_UNINITIALIZED
143   0000              SECTION BSS_END
144   0000              
145   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
146   0000              
147   0000              IF (__crt_org_vector_table = 0)
148   0000              
149   0000              section interrupt_vectors
150   0000              org 0
151   0000              
152   0000              ENDIF
153   0000              
154   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
155   0000              
720   0000              
721   0000              
722   0000              
723   0000                 SECTION UNASSIGNED
724   0000                 org 0
725   0000              
726   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
727   0000              
728   0000              ENDIF
729   0000              
730   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
731   0000              
732   0000              
733   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
734   0000              ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
735   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
736   0000              
737   0000              
738   0000              ; When FILEs and FDSTRUCTs are instantiated labels are assigned
739   0000              ; to point at created structures.
740   0000              ;
741   0000              ; The label formats are:
742   0000              ;
743   0000              ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
744   0000              ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
745   0000              ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
746   0000              
747   0000              
748   0000              
749   0000              
750   0000              
751   0000              
752   0000              
753   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
754   0000                 ; FILE  : _stdin
755   0000                 ;
756   0000                 ; driver: rc_00_input_asci0
757   0000                 ; fd    : 0
758   0000                 ; mode  : read only
759   0000                 ; type  : 003 = character input
760   0000                 ;
761   0000                 ; ioctl_flags   : 0x0100
762   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
763   0000              
764   0000              
765   0000                 SECTION data_clib
766   0000                 SECTION data_stdio
767   0000              
768   0000                 ; FILE *
769   0000              
770   0000                 PUBLIC _stdin
771   0000              
772   0000  04 00          _stdin:  defw __i_stdio_file_0 + 2
773   0002              
774   0002                 ; FILE structure
775   0002              
776   0002                 __i_stdio_file_0:
777   0002              
778   0002                    ; open files link
779   0002              
780   0002  00 00             defw 0
781   0004              
782   0004                    ; jump to underlying fd
783   0004              
784   0004  C3                defb 195
785   0005  06 00             defw __i_fcntl_fdstruct_0
786   0007              
787   0007                    ; state_flags_0
788   0007                    ; state_flags_1
789   0007                    ; conversion flags
790   0007                    ; ungetc
791   0007              
792   0007  40                defb 0x40      ; read + stdio manages ungetc + normal file type
793   0008  02                defb 0x02      ; last operation was read
794   0009  00                defb 0
795   000A  00                defb 0
796   000B              
797   000B                    ; mtx_recursive
798   000B              
799   000B  00                defb 0         ; thread owner = none
800   000C  02                defb 0x02      ; mtx_recursive
801   000D  00                defb 0         ; lock count = 0
802   000E  FE                defb 0xfe      ; atomic spinlock
803   000F  00 00             defw 0         ; list of blocked threads
804   0011              
805   0011              
806   0011                 ; fd table entry
807   0011              
808   0011                 SECTION data_fcntl_fdtable_body
809   0000  06 00          defw __i_fcntl_fdstruct_0
810   0002              
811   0002                 ; FDSTRUCT structure
812   0002              
813   0002                 SECTION data_fcntl_stdio_heap_body
814   0000              
815   0000                 EXTERN console_01_input_terminal_fdriver
816   0000                 EXTERN rc_00_input_asci0
817   0000              
818   0000                 __i_fcntl_heap_0:
819   0000              
820   0000                    ; heap header
821   0000              
822   0000  17 00             defw __i_fcntl_heap_1
823   0002  17 00             defw 23
824   0004  00 00             defw 0
825   0006              
826   0006                 __i_fcntl_fdstruct_0:
827   0006              
828   0006                    ; FDSTRUCT structure
829   0006              
830   0006                    ; call to first entry to driver
831   0006              
832   0006  CD                defb 205
833   0007  00 00             defw console_01_input_terminal_fdriver
834   0009              
835   0009                    ; jump to driver
836   0009              
837   0009  C3                defb 195
838   000A  00 00             defw rc_00_input_asci0
839   000C              
840   000C                    ; flags
841   000C                    ; reference_count
842   000C                    ; mode_byte
843   000C              
844   000C  03                defb 0x03      ; stdio handles ungetc + type = character input
845   000D  02                defb 2
846   000E  01                defb 0x01      ; read only
847   000F              
848   000F                    ; ioctl_flags
849   000F              
850   000F  00 01             defw 0x0100
851   0011              
852   0011                    ; mtx_plain
853   0011              
854   0011  00                defb 0         ; thread owner = none
855   0012  01                defb 0x01      ; mtx_plain
856   0013  00                defb 0         ; lock count = 0
857   0014  FE                defb 0xfe      ; atomic spinlock
858   0015  00 00             defw 0         ; list of blocked threads
859   0017              
860   0017              
861   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
862   0017              
863   0017              
864   0017              
865   0017              
866   0017              
867   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
868   0017                 ; FILE  : _linein
869   0017                 ;
870   0017                 ; driver: rc_00_input_asci1
871   0017                 ; fd    : 1
872   0017                 ; mode  : read only
873   0017                 ; type  : 003 = character input
874   0017                 ;
875   0017                 ; ioctl_flags   : 0x0100
876   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
877   0017              
878   0017              
879   0017                 SECTION data_clib
880   0000                 SECTION data_stdio
881   0011              
882   0011                 ; FILE *
883   0011              
884   0011                 PUBLIC _linein
885   0011              
886   0011  15 00          _linein:  defw __i_stdio_file_1 + 2
887   0013              
888   0013                 ; FILE structure
889   0013              
890   0013                 __i_stdio_file_1:
891   0013              
892   0013                    ; open files link
893   0013              
894   0013  02 00             defw __i_stdio_file_0
895   0015              
896   0015                    ; jump to underlying fd
897   0015              
898   0015  C3                defb 195
899   0016  1D 00             defw __i_fcntl_fdstruct_1
900   0018              
901   0018                    ; state_flags_0
902   0018                    ; state_flags_1
903   0018                    ; conversion flags
904   0018                    ; ungetc
905   0018              
906   0018  40                defb 0x40      ; read + stdio manages ungetc + normal file type
907   0019  02                defb 0x02      ; last operation was read
908   001A  00                defb 0
909   001B  00                defb 0
910   001C              
911   001C                    ; mtx_recursive
912   001C              
913   001C  00                defb 0         ; thread owner = none
914   001D  02                defb 0x02      ; mtx_recursive
915   001E  00                defb 0         ; lock count = 0
916   001F  FE                defb 0xfe      ; atomic spinlock
917   0020  00 00             defw 0         ; list of blocked threads
918   0022              
919   0022              
920   0022                 ; fd table entry
921   0022              
922   0022                 SECTION data_fcntl_fdtable_body
923   0002  1D 00          defw __i_fcntl_fdstruct_1
924   0004              
925   0004                 ; FDSTRUCT structure
926   0004              
927   0004                 SECTION data_fcntl_stdio_heap_body
928   0017              
929   0017                 EXTERN console_01_input_terminal_fdriver
930   0017                 EXTERN rc_00_input_asci1
931   0017              
932   0017                 __i_fcntl_heap_1:
933   0017              
934   0017                    ; heap header
935   0017              
936   0017  2E 00             defw __i_fcntl_heap_2
937   0019  17 00             defw 23
938   001B  00 00             defw __i_fcntl_heap_0
939   001D              
940   001D                 __i_fcntl_fdstruct_1:
941   001D              
942   001D                    ; FDSTRUCT structure
943   001D              
944   001D                    ; call to first entry to driver
945   001D              
946   001D  CD                defb 205
947   001E  00 00             defw console_01_input_terminal_fdriver
948   0020              
949   0020                    ; jump to driver
950   0020              
951   0020  C3                defb 195
952   0021  00 00             defw rc_00_input_asci1
953   0023              
954   0023                    ; flags
955   0023                    ; reference_count
956   0023                    ; mode_byte
957   0023              
958   0023  03                defb 0x03      ; stdio handles ungetc + type = character input
959   0024  02                defb 2
960   0025  01                defb 0x01      ; read only
961   0026              
962   0026                    ; ioctl_flags
963   0026              
964   0026  00 01             defw 0x0100
965   0028              
966   0028                    ; mtx_plain
967   0028              
968   0028  00                defb 0         ; thread owner = none
969   0029  01                defb 0x01      ; mtx_plain
970   002A  00                defb 0         ; lock count = 0
971   002B  FE                defb 0xfe      ; atomic spinlock
972   002C  00 00             defw 0         ; list of blocked threads
973   002E              
974   002E              
975   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
976   002E              
977   002E              
978   002E              
979   002E              
980   002E              
981   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
982   002E                 ; FILE  : _stdout
983   002E                 ;
984   002E                 ; driver: rc_00_output_asci0
985   002E                 ; fd    : 2
986   002E                 ; mode  : write only
987   002E                 ; type  : 004 = character output
988   002E                 ;
989   002E                 ; ioctl_flags   : 0x0100
990   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
991   002E              
992   002E              
993   002E                 SECTION data_clib
994   0000                 SECTION data_stdio
995   0022              
996   0022                 ; FILE *
997   0022              
998   0022                 PUBLIC _stdout
999   0022              
1000  0022  26 00          _stdout:  defw __i_stdio_file_2 + 2
1001  0024              
1002  0024                 ; FILE structure
1003  0024              
1004  0024                 __i_stdio_file_2:
1005  0024              
1006  0024                    ; open files link
1007  0024              
1008  0024  13 00             defw __i_stdio_file_1
1009  0026              
1010  0026                    ; jump to underlying fd
1011  0026              
1012  0026  C3                defb 195
1013  0027  34 00             defw __i_fcntl_fdstruct_2
1014  0029              
1015  0029                    ; state_flags_0
1016  0029                    ; state_flags_1
1017  0029                    ; conversion flags
1018  0029                    ; ungetc
1019  0029              
1020  0029  80                defb 0x80         ; write + normal file type
1021  002A  00                defb 0            ; last operation was write
1022  002B  00                defb 0
1023  002C  00                defb 0
1024  002D              
1025  002D                    ; mtx_recursive
1026  002D              
1027  002D  00                defb 0         ; thread owner = none
1028  002E  02                defb 0x02      ; mtx_recursive
1029  002F  00                defb 0         ; lock count = 0
1030  0030  FE                defb 0xfe      ; atomic spinlock
1031  0031  00 00             defw 0         ; list of blocked threads
1032  0033              
1033  0033              
1034  0033                 ; fd table entry
1035  0033              
1036  0033                 SECTION data_fcntl_fdtable_body
1037  0004  34 00          defw __i_fcntl_fdstruct_2
1038  0006              
1039  0006                 ; FDSTRUCT structure
1040  0006              
1041  0006                 SECTION data_fcntl_stdio_heap_body
1042  002E              
1043  002E                 EXTERN console_01_output_terminal_fdriver
1044  002E                 EXTERN rc_00_output_asci0
1045  002E              
1046  002E                 __i_fcntl_heap_2:
1047  002E              
1048  002E                    ; heap header
1049  002E              
1050  002E  45 00             defw __i_fcntl_heap_3
1051  0030  17 00             defw 23
1052  0032  17 00             defw __i_fcntl_heap_1
1053  0034              
1054  0034                 __i_fcntl_fdstruct_2:
1055  0034              
1056  0034                    ; FDSTRUCT structure
1057  0034              
1058  0034                    ; call to first entry to driver
1059  0034              
1060  0034  CD                defb 205
1061  0035  00 00             defw console_01_output_terminal_fdriver
1062  0037              
1063  0037                    ; jump to driver
1064  0037              
1065  0037  C3                defb 195
1066  0038  00 00             defw rc_00_output_asci0
1067  003A              
1068  003A                    ; flags
1069  003A                    ; reference_count
1070  003A                    ; mode_byte
1071  003A              
1072  003A  04                defb 0x04      ; type = character output
1073  003B  02                defb 2
1074  003C  02                defb 0x02      ; write only
1075  003D              
1076  003D                    ; ioctl_flags
1077  003D              
1078  003D  00 01             defw 0x0100
1079  003F              
1080  003F                    ; mtx_plain
1081  003F              
1082  003F  00                defb 0         ; thread owner = none
1083  0040  01                defb 0x01      ; mtx_plain
1084  0041  00                defb 0         ; lock count = 0
1085  0042  FE                defb 0xfe      ; atomic spinlock
1086  0043  00 00             defw 0         ; list of blocked threads
1087  0045              
1088  0045              
1089  0045                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1090  0045              
1091  0045              
1092  0045              
1093  0045              
1094  0045              
1095  0045                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1096  0045                 ; FILE  : _lineout
1097  0045                 ;
1098  0045                 ; driver: rc_00_output_asci1
1099  0045                 ; fd    : 3
1100  0045                 ; mode  : write only
1101  0045                 ; type  : 004 = character output
1102  0045                 ;
1103  0045                 ; ioctl_flags   : 0x0100
1104  0045                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1105  0045              
1106  0045              
1107  0045                 SECTION data_clib
1108  0000                 SECTION data_stdio
1109  0033              
1110  0033                 ; FILE *
1111  0033              
1112  0033                 PUBLIC _lineout
1113  0033              
1114  0033  37 00          _lineout:  defw __i_stdio_file_3 + 2
1115  0035              
1116  0035                 ; FILE structure
1117  0035              
1118  0035                 __i_stdio_file_3:
1119  0035              
1120  0035                    ; open files link
1121  0035              
1122  0035  24 00             defw __i_stdio_file_2
1123  0037              
1124  0037                    ; jump to underlying fd
1125  0037              
1126  0037  C3                defb 195
1127  0038  4B 00             defw __i_fcntl_fdstruct_3
1128  003A              
1129  003A                    ; state_flags_0
1130  003A                    ; state_flags_1
1131  003A                    ; conversion flags
1132  003A                    ; ungetc
1133  003A              
1134  003A  80                defb 0x80         ; write + normal file type
1135  003B  00                defb 0            ; last operation was write
1136  003C  00                defb 0
1137  003D  00                defb 0
1138  003E              
1139  003E                    ; mtx_recursive
1140  003E              
1141  003E  00                defb 0         ; thread owner = none
1142  003F  02                defb 0x02      ; mtx_recursive
1143  0040  00                defb 0         ; lock count = 0
1144  0041  FE                defb 0xfe      ; atomic spinlock
1145  0042  00 00             defw 0         ; list of blocked threads
1146  0044              
1147  0044              
1148  0044                 ; fd table entry
1149  0044              
1150  0044                 SECTION data_fcntl_fdtable_body
1151  0006  4B 00          defw __i_fcntl_fdstruct_3
1152  0008              
1153  0008                 ; FDSTRUCT structure
1154  0008              
1155  0008                 SECTION data_fcntl_stdio_heap_body
1156  0045              
1157  0045                 EXTERN console_01_output_terminal_fdriver
1158  0045                 EXTERN rc_00_output_asci1
1159  0045              
1160  0045                 __i_fcntl_heap_3:
1161  0045              
1162  0045                    ; heap header
1163  0045              
1164  0045  5C 00             defw __i_fcntl_heap_4
1165  0047  17 00             defw 23
1166  0049  2E 00             defw __i_fcntl_heap_2
1167  004B              
1168  004B                 __i_fcntl_fdstruct_3:
1169  004B              
1170  004B                    ; FDSTRUCT structure
1171  004B              
1172  004B                    ; call to first entry to driver
1173  004B              
1174  004B  CD                defb 205
1175  004C  00 00             defw console_01_output_terminal_fdriver
1176  004E              
1177  004E                    ; jump to driver
1178  004E              
1179  004E  C3                defb 195
1180  004F  00 00             defw rc_00_output_asci1
1181  0051              
1182  0051                    ; flags
1183  0051                    ; reference_count
1184  0051                    ; mode_byte
1185  0051              
1186  0051  04                defb 0x04      ; type = character output
1187  0052  02                defb 2
1188  0053  02                defb 0x02      ; write only
1189  0054              
1190  0054                    ; ioctl_flags
1191  0054              
1192  0054  00 01             defw 0x0100
1193  0056              
1194  0056                    ; mtx_plain
1195  0056              
1196  0056  00                defb 0         ; thread owner = none
1197  0057  01                defb 0x01      ; mtx_plain
1198  0058  00                defb 0         ; lock count = 0
1199  0059  FE                defb 0xfe      ; atomic spinlock
1200  005A  00 00             defw 0         ; list of blocked threads
1201  005C              
1202  005C              
1203  005C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1204  005C              
1205  005C              
1206  005C              
1207  005C              
1208  005C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1209  005C                 ; DUPED FILE DESCRIPTOR
1210  005C                 ;
1211  005C                 ; FILE  : _stderr
1212  005C                 ; flags : 0x80
1213  005C                 ;
1214  005C                 ; fd    : 4
1215  005C                 ; dup fd: __i_fcntl_fdstruct_1
1216  005C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1217  005C              
1218  005C              
1219  005C                 SECTION data_clib
1220  0000                 SECTION data_stdio
1221  0044              
1222  0044                 ; FILE *
1223  0044              
1224  0044                 PUBLIC _stderr
1225  0044              
1226  0044  48 00          _stderr:  defw __i_stdio_file_4 + 2
1227  0046              
1228  0046                 ; FILE structure
1229  0046              
1230  0046                 __i_stdio_file_4:
1231  0046              
1232  0046                    ; open files link
1233  0046              
1234  0046  35 00             defw __i_stdio_file_3
1235  0048              
1236  0048                    ; jump to duped fd
1237  0048              
1238  0048  C3                defb 195
1239  0049  1D 00             defw __i_fcntl_fdstruct_1
1240  004B              
1241  004B                    ; state_flags_0
1242  004B                    ; state_flags_1
1243  004B                    ; conversion flags
1244  004B                    ; ungetc
1245  004B              
1246  004B  80                defb 0x80
1247  004C  00                defb 0
1248  004D  00                defb 0
1249  004E  00                defb 0
1250  004F              
1251  004F                    ; mtx_recursive
1252  004F              
1253  004F  00                defb 0         ; thread owner = none
1254  0050  02                defb 0x02      ; mtx_recursive
1255  0051  00                defb 0         ; lock count = 0
1256  0052  FE                defb 0xfe      ; atomic spinlock
1257  0053  00 00             defw 0         ; list of blocked threads
1258  0055              
1259  0055              
1260  0055                 ; fd table entry
1261  0055              
1262  0055                 SECTION data_fcntl_fdtable_body
1263  0008  1D 00          defw __i_fcntl_fdstruct_1
1264  000A              
1265  000A                 ; FDSTRUCT structure
1266  000A              
1267  000A                 defc __i_fcntl_fdstruct_4 = __i_fcntl_fdstruct_1
1268  000A              
1269  000A                 ; adjust reference count on duped FDSTRUCT
1270  000A              
1271  000A                 SECTION code_crt_init
1272  0000              
1273  0000  21 24 00       ld hl,__i_fcntl_fdstruct_1 + 7     ; & FDSTRUCT.ref_count
1274  0003  34             inc (hl)
1275  0004  34             inc (hl)
1276  0005              
1277  0005              
1278  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1279  0005              
1280  0005              
1281  0005              
1282  0005              
1283  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1284  0005                 ;; create open and closed FILE lists
1285  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1286  0005              
1287  0005                 ; __clib_fopen_max   = max number of open FILEs specified by user
1288  0005                 ; 5 = number of static FILEs instantiated in crt
1289  0005                 ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
1290  0005              
1291  0005              	PUBLIC __MAX_FOPEN
1292  0005              
1293  0005                 SECTION data_clib
1294  0000                 SECTION data_stdio
1295  0055              
1296  0055                 IF (__clib_fopen_max > 0) || (5 > 0)
1297  0055              
1298  0055                    ; number of FILEs > 0
1299  0055              
1300  0055                    ; construct list of open files
1301  0055              
1302  0055                    IF 5 > 0
1303  0055              
1304  0055                       ; number of FILEs statically generated > 0
1305  0055              
1306  0055                       SECTION data_clib
1307  0000                       SECTION data_stdio
1308  0055              
1309  0055                       PUBLIC __stdio_open_file_list
1310  0055              
1311  0055  46 00                __stdio_open_file_list:  defw __i_stdio_file_4
1312  0057              
1313  0057                    ELSE
1314  0057              
1315  0057                       ; number of FILEs statically generated = 0
1316  0057              
1317  0057                       SECTION bss_clib
1318  0057                       SECTION bss_stdio
1319  0057              
1320  0057                       PUBLIC __stdio_open_file_list
1321  0057              
1322  0057                       __stdio_open_file_list:  defw 0
1323  0057              
1324  0057                    ENDIF
1325  0057              
1326  0057                    ; construct list of closed / available FILEs
1327  0057              
1328  0057                    SECTION data_clib
1329  0000                    SECTION data_stdio
1330  0057              
1331  0057                    PUBLIC __stdio_closed_file_list
1332  0057              
1333  0057  00 00 57 00       __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1334  005B              
1335  005B                    IF __clib_fopen_max > 5
1336  005B              
1337  005B              		   defc __MAX_FOPEN = __clib_fopen_max
1338  005B              
1339  005B                       ; create extra FILE structures
1340  005B              
1341  005B                       SECTION bss_clib
1342  005B                       SECTION bss_stdio
1343  005B              
1344  005B                       __stdio_file_extra:      defs (__clib_fopen_max - 5) * 15
1345  005B              
1346  005B                       SECTION code_crt_init
1347  005B              
1348  005B                          ld bc,__stdio_closed_file_list
1349  005B                          ld de,__stdio_file_extra
1350  005B                          ld l,__clib_fopen_max - 5
1351  005B              
1352  005B                       loop:
1353  005B              
1354  005B                          push hl
1355  005B              
1356  005B                          EXTERN asm_p_forward_list_alt_push_front
1357  005B                          call asm_p_forward_list_alt_push_front
1358  005B              
1359  005B                          ld de,15
1360  005B                          add hl,de
1361  005B                          ex de,hl
1362  005B              
1363  005B                          pop hl
1364  005B              
1365  005B                          dec l
1366  005B                          jr nz, loop
1367  005B              
1368  005B                    ELSE
1369  005B              
1370  005B                       defc __MAX_FOPEN = 5
1371  005B              
1372  005B                    ENDIF
1373  005B              
1374  005B                 ENDIF
1375  005B              
1376  005B                 IF (__clib_fopen_max = 0) && (5 = 0)
1377  005B              
1378  005B                    defc __MAX_FOPEN = 0
1379  005B              
1380  005B                    ; create empty file lists
1381  005B              
1382  005B                    SECTION bss_clib
1383  005B                    SECTION bss_stdio
1384  005B              
1385  005B                    PUBLIC __stdio_open_file_list
1386  005B                    __stdio_open_file_list:  defw 0
1387  005B              
1388  005B                    SECTION data_clib
1389  005B                    SECTION data_stdio
1390  005B              
1391  005B                    PUBLIC __stdio_closed_file_list
1392  005B                    __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1393  005B              
1394  005B                 ENDIF
1395  005B              
1396  005B                 IF (__clib_fopen_max < 0) && (5 = 0)
1397  005B              
1398  005B                    defc __MAX_FOPEN = 0
1399  005B              
1400  005B                 ENDIF
1401  005B              
1402  005B                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1403  005B                 ;; create fd table
1404  005B                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1405  005B              
1406  005B                 ; __clib_open_max  = max number of open fds specified by user
1407  005B                 ; 5 = number of static file descriptors created
1408  005B              
1409  005B                 PUBLIC __fcntl_fdtbl
1410  005B                 PUBLIC __fcntl_fdtbl_size
1411  005B              
1412  005B                 IF 5 > 0
1413  005B              
1414  005B                    ; create rest of fd table in data segment
1415  005B              
1416  005B                    SECTION data_fcntl_fdtable_body
1417  000A              
1418  000A                    EXTERN __data_fcntl_fdtable_body_head
1419  000A              
1420  000A                    defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
1421  000A              
1422  000A                    IF __clib_open_max > 5
1423  000A              
1424  000A                       SECTION data_fcntl_fdtable_body
1425  000A              
1426  000A                       defs (__clib_open_max - 5) * 2
1427  000A                       defc __fcntl_fdtbl_size = __clib_open_max
1428  000A              
1429  000A                    ELSE
1430  000A              
1431  000A                       defc __fcntl_fdtbl_size = 5
1432  000A              
1433  000A                    ENDIF
1434  000A              
1435  000A                 ELSE
1436  000A              
1437  000A                    IF __clib_open_max > 0
1438  000A              
1439  000A                       ; create fd table in bss segment
1440  000A              
1441  000A                       SECTION bss_clib
1442  000A                       SECTION bss_fcntl
1443  000A              
1444  000A                       __fcntl_fdtbl:        defs __clib_open_max * 2
1445  000A              
1446  000A                    ELSE
1447  000A              
1448  000A                       ; no fd table at all
1449  000A              
1450  000A                       defc __fcntl_fdtbl = 0
1451  000A              
1452  000A                    ENDIF
1453  000A              
1454  000A                    defc __fcntl_fdtbl_size = __clib_open_max
1455  000A              
1456  000A                 ENDIF
1457  000A              
1458  000A              	PUBLIC __MAX_OPEN
1459  000A              	defc   __MAX_OPEN = __fcntl_fdtbl_size
1460  000A              
1461  000A                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1462  000A                 ;; finalize stdio heap
1463  000A                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1464  000A              
1465  000A                 ; __clib_stdio_heap_size  = desired stdio heap size in bytes
1466  000A                 ; 92  = byte size of static FDSTRUCTs
1467  000A                 ; 4   = number of heap allocations
1468  000A                 ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
1469  000A              
1470  000A                 IF 92 > 0
1471  000A              
1472  000A                    ; static FDSTRUCTs have been allocated in the heap
1473  000A              
1474  000A                    SECTION data_clib
1475  0000                    SECTION data_fcntl
1476  0000              
1477  0000                    PUBLIC __stdio_heap
1478  0000              
1479  0000  00 00             __stdio_heap:            defw __stdio_block
1480  0002              
1481  0002                    SECTION data_fcntl_stdio_heap_head
1482  0000              
1483  0000                    __stdio_block:
1484  0000              
1485  0000  00                   defb 0                ; no owner
1486  0001  01                   defb 0x01             ; mtx_plain
1487  0002  00                   defb 0                ; number of lock acquisitions
1488  0003  FE                   defb 0xfe             ; spinlock (unlocked)
1489  0004  00 00                defw 0                ; list of threads blocked on mutex
1490  0006              
1491  0006                    IF __clib_stdio_heap_size > (92 + 14)
1492  0006              
1493  0006                       ; expand stdio heap to desired size
1494  0006              
1495  0006                       SECTION data_fcntl_stdio_heap_body
1496  005C              
1497  005C                       __i_fcntl_heap_4:
1498  005C              
1499  005C  00 00                   defw __i_fcntl_heap_5
1500  005E  00 00                   defw 0
1501  0060  45 00                   defw __i_fcntl_heap_3
1502  0062  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                                    defs __clib_stdio_heap_size - 92 - 14
1503  0078              
1504  0078                       ; terminate stdio heap
1505  0078              
1506  0078                       SECTION data_fcntl_stdio_heap_tail
1507  0000              
1508  0000  00 00                __i_fcntl_heap_5:   defw 0
1509  0002              
1510  0002                    ELSE
1511  0002              
1512  0002                       ; terminate stdio heap
1513  0002              
1514  0002                       SECTION data_fcntl_stdio_heap_tail
1515  0002              
1516  0002                       __i_fcntl_heap_4:   defw 0
1517  0002              
1518  0002                    ENDIF
1519  0002              
1520  0002                 ELSE
1521  0002              
1522  0002                    ; no FDSTRUCTs statically created
1523  0002              
1524  0002                    IF __clib_stdio_heap_size > 14
1525  0002              
1526  0002                       SECTION data_clib
1527  0002                       SECTION data_fcntl
1528  0002              
1529  0002                       PUBLIC __stdio_heap
1530  0002              
1531  0002                       __stdio_heap:         defw __stdio_block
1532  0002              
1533  0002                       SECTION bss_clib
1534  0002                       SECTION bss_fcntl
1535  0002              
1536  0002                       PUBLIC __stdio_block
1537  0002              
1538  0002                       __stdio_block:         defs __clib_stdio_heap_size
1539  0002              
1540  0002                       SECTION code_crt_init
1541  0002              
1542  0002                       ld hl,__stdio_block
1543  0002                       ld bc,__clib_stdio_heap_size
1544  0002              
1545  0002                       EXTERN asm_heap_init
1546  0002                       call asm_heap_init
1547  0002              
1548  0002                    ENDIF
1549  0002              
1550  0002                 ENDIF
1551  0002              
1552  0002              
1553  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1554  0002              ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1555  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1556  0002              
1557  0002              SECTION CODE
1558  0000              
1559  0000              PUBLIC __Start, __Exit
1560  0000              
1561  0000              EXTERN _main
1562  0000              
1563  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1564  0000              ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1565  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1566  0000              
1567  0000              IF __crt_include_preamble
1568  0000              
1569  0000                 include "crt_preamble.asm"
1     0000              
2     0000              IF (__crt_org_code = 0)
3     0000              
4     0000              SECTION code_crt_init
5     0005              
6     0005  AF              XOR     A               ; Zero Accumulator
7     0006              
8     0006                                          ; Clear Refresh Control Reg (RCR)
9     0006  ED 39 36        OUT0    (RCR),A         ; DRAM Refresh Enable (0 Disabled)
10    0009              
11    0009                                          ; Clear INT/TRAP Control Register (ITC)
12    0009  ED 39 34        OUT0    (ITC),A         ; Disable all external interrupts.
13    000C              
14    000C                                          ; Set Operation Mode Control Reg (OMCR)
15    000C  3E 80           LD      A,OMCR_M1E      ; Enable M1 for single step, disable 64180 I/O _RD Mode
16    000E  ED 39 3E        OUT0    (OMCR),A        ; X80 Mode (M1 Disabled, IOC Disabled)
17    0011              
18    0011                                          ; Set internal clock = crystal x 2 = 36.864MHz
19    0011                                          ; if using ZS8180 or Z80182 at High-Speed
20    0011  3E 80           LD      A,CMR_X2        ; Set Hi-Speed flag
21    0013  ED 39 1E        OUT0    (CMR),A         ; CPU Clock Multiplier Reg (CMR)
22    0016              
23    0016                                          ; DMA/Wait Control Reg Set I/O Wait States
24    0016  3E 10           LD      A,DCNTL_IWI0
25    0018  ED 39 32        OUT0    (DCNTL),A       ; 0 Memory Wait & 2 I/O Wait
26    001B              
27    001B                                          ; Set Logical RAM Addresses
28    001B                                          ; $F000-$FFFF RAM   CA1  -> $F.
29    001B                                          ; $D000-$EFFF RAM   BANK
30    001B                                          ; $0000-$CFFF Flash BANK -> $.0
31    001B              
32    001B  3E F0           LD      A,$F0           ; Set New Common 1 / Bank Areas for RAM
33    001D  ED 39 3A        OUT0    (CBAR),A
34    0020              
35    0020  3E 00           LD      A,$00           ; Set Common 1 Base Physical $0F000 -> $00
36    0022  ED 39 38        OUT0    (CBR),A
37    0025              
38    0025  3E 00           LD      A,$00           ; Set Bank Base Physical $00000 -> $00
39    0027  ED 39 39        OUT0    (BBR),A
40    002A              
41    002A                                          ; set up COMMON_AREA_1 Data
42    002A                  EXTERN  __rodata_common1_data_head
43    002A                  EXTERN  __rodata_common1_data_size
44    002A              
45    002A                                          ; load the DMA engine registers with source, destination, and count
46    002A  AF              xor     a               ; using BANK0
47    002B  21 00 00        ld      hl, __rodata_common1_data_head
48    002E  ED 29 20        out0    (SAR0L), l
49    0031  ED 21 21        out0    (SAR0H), h
50    0034  ED 39 22        out0    (SAR0B), a
51    0037              
52    0037  21 00 F0        ld      hl, __COMMON_AREA_1_PHASE_DATA
53    003A  ED 29 23        out0    (DAR0L), l
54    003D  ED 21 24        out0    (DAR0H), h
55    0040  ED 39 25        out0    (DAR0B), a
56    0043              
57    0043  21 00 00        ld      hl, __rodata_common1_data_size
58    0046  ED 29 26        out0    (BCR0L), l
59    0049  ED 21 27        out0    (BCR0H), h
60    004C              
61    004C  01 40 02        ld      bc, +(DMODE_MMOD)*$100+DSTAT_DE0
62    004F  ED 01 31        out0    (DMODE), b      ; DMODE_MMOD - memory++ to memory++, burst mode
63    0052  ED 09 30        out0    (DSTAT), c      ; DSTAT_DE0 - enable DMA channel 0, no interrupt
64    0055                                          ; in burst mode the Z180 CPU stops until the DMA completes
65    0055              
66    0055                                          ; set up COMMON_AREA_1 Drivers
67    0055                  EXTERN  __rodata_common1_driver_head
68    0055                  EXTERN  __rodata_common1_driver_size
69    0055              
70    0055                                          ; load the DMA engine registers with source, destination, and count
71    0055  AF              xor     a               ; using BANK0
72    0056  21 00 00        ld      hl, __rodata_common1_driver_head
73    0059  ED 29 20        out0    (SAR0L), l
74    005C  ED 21 21        out0    (SAR0H), h
75    005F  ED 39 22        out0    (SAR0B), a
76    0062              
77    0062  21 00 F7        ld      hl, __COMMON_AREA_1_PHASE_DRIVER
78    0065  ED 29 23        out0    (DAR0L), l
79    0068  ED 21 24        out0    (DAR0H), h
80    006B  ED 39 25        out0    (DAR0B), a
81    006E              
82    006E  21 00 00        ld      hl, __rodata_common1_driver_size
83    0071  ED 29 26        out0    (BCR0L), l
84    0074  ED 21 27        out0    (BCR0H), h
85    0077              
86    0077  01 40 02        ld      bc, +(DMODE_MMOD)*$100+DSTAT_DE0
87    007A  ED 01 31        out0    (DMODE), b      ; DMODE_MMOD - memory++ to memory++, burst mode
88    007D  ED 09 30        out0    (DSTAT), c      ; DSTAT_DE0 - enable DMA channel 0, no interrupt
89    0080                                          ; in burst mode the Z180 CPU stops until the DMA completes
90    0080              
91    0080                  EXTERN  _prt0Lock
92    0080                                          ; now there's valid COMMON_AREA_1
93    0080                                          ; we can start the system_tick
94    0080  21 00 00        ld      hl, _prt0Lock   ; take the PRT0 lock, forever basically
95    0083  CB 2E           sra     (hl)
96    0085                                          ; we do 256 ticks per second
97    0085  21 0F 0E        ld      hl, __CPU_CLOCK/__CPU_TIMER_SCALE/256-1
98    0088  ED 29 0E        out0    (RLDR0L), l
99    008B  ED 21 0F        out0    (RLDR0H), h
100   008E                                          ; enable down counting and interrupts for PRT0
101   008E  3E 11           ld      a, TCR_TIE0|TCR_TDE0
102   0090  ED 39 10        out0    (TCR), a        ; using the driver/z180/system_tick.asm
103   0093              
104   0093                  EXTERN  _asci0_init
105   0093  CD 00 00        call    _asci0_init     ; initialise the asci0
106   0096              
107   0096                  EXTERN  _asci1_init
108   0096  CD 00 00        call    _asci1_init     ; and the asci1 interfaces
109   0099              
110   0099                  EXTERN  _bankLockBase   ; lock BANK0 whilst the yabios CLI is running
111   0099  21 00 00        ld      hl, _bankLockBase
112   009C  36 FF           ld      (hl), $FF
113   009E              
114   009E              ENDIF
115   009E              
1570  009E                 SECTION CODE
1571  0000              
1572  0000              ENDIF
1573  0000              
1574  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1575  0000              ;; PAGE ZERO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1576  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1577  0000              
1578  0000              IF (ASMPC = 0) && (__crt_org_code = 0)
1579  0000              
1580  0000                 include "crt_page_zero_yabios.inc"
1     0000              
2     0000              SECTION code_crt_start
3     0000              
4     0000              ; address = 0x0000
5     0000              ; must decide if this is a power on reset or a trap
6     0000              
7     0000  C3 80 00       jp __Test_Trap       ; jump to the start of the trap test at 0x0080
8     0003              
9     0003                 PUBLIC _bank_cpm_iobyte
10    0003                 PUBLIC _bank_cpm_default_drive
11    0003              
12    0003  00             _bank_cpm_iobyte:        defb $00
13    0004  00             _bank_cpm_default_drive: defb $00
14    0005              
15    0005                 PUBLIC _bank_cpm_bdos_addr
16    0005              
17    0005  C3 00 01       jp __Start       ; main entry to the CP/M BDOS when in banked page0
18    0008              
19    0008                 defc _bank_cpm_bdos_addr = ASMPC - 2
20    0008              
21    0008              ; address = 0x0008
22    0008              
23    0008                 defs 0x0008 - ASMPC
24    0008              
25    0008              IF ((__crt_enable_rst & $0202) = $02)
26    0008              
27    0008                 EXTERN _z180_rst_08h
28    0008  C3 00 00       jp     _z180_rst_08h
29    000B              
30    000B              ELSE
31    000B              
32    000B                 IF ((__crt_enable_rst & $0202) = $0202)
33    000B              
34    000B                 jp     __z180_rst_08h
35    000B              
36    000B                 ELSE
37    000B              
38    000B                 jp     l_ret
39    000B              
40    000B                 ENDIF
41    000B              
42    000B              ENDIF
43    000B              
44    000B              IF ((__crt_enable_rst & $0202) != $0202)
45    000B              
46    000B                 PUBLIC _z180_rst_08h_vector
47    000B                 defc   _z180_rst_08h_vector = $09
48    000B              
49    000B              ENDIF
50    000B              
51    000B              ; address = 0x0010
52    000B              
53    000B  00 00 00 00 00 
                           defs 0x0010 - ASMPC
54    0010              
55    0010              IF ((__crt_enable_rst & $0404) = $04)
56    0010              
57    0010                 EXTERN _z180_rst_10h
58    0010  C3 00 00       jp     _z180_rst_10h
59    0013              
60    0013              ELSE
61    0013              
62    0013                 IF ((__crt_enable_rst & $0404) = $0404)
63    0013              
64    0013                 jp     __z180_rst_10h
65    0013              
66    0013                 ELSE
67    0013              
68    0013                 jp     l_ret
69    0013              
70    0013                 ENDIF
71    0013              
72    0013              ENDIF
73    0013              
74    0013              IF ((__crt_enable_rst & $0404) != $0404)
75    0013              
76    0013                 PUBLIC _z180_rst_10h_vector
77    0013                 defc   _z180_rst_10h_vector = $11
78    0013              
79    0013              ENDIF
80    0013              
81    0013              ; address = 0x0018
82    0013              
83    0013  00 00 00 00 00 
                           defs 0x0018 - ASMPC
84    0018              
85    0018              IF ((__crt_enable_rst & $0808) = $08)
86    0018              
87    0018                 EXTERN _z180_rst_18h
88    0018  C3 00 00       jp     _z180_rst_18h
89    001B              
90    001B              ELSE
91    001B              
92    001B                 IF ((__crt_enable_rst & $0808) = $0808)
93    001B              
94    001B                 jp     __z180_rst_18h
95    001B              
96    001B                 ELSE
97    001B              
98    001B                 jp     l_ret
99    001B              
100   001B                 ENDIF
101   001B              
102   001B              ENDIF
103   001B              
104   001B              IF ((__crt_enable_rst & $0808) != $0808)
105   001B              
106   001B                 PUBLIC _z180_rst_18h_vector
107   001B                 defc   _z180_rst_18h_vector = $19
108   001B              
109   001B              ENDIF
110   001B              
111   001B              ; address = 0x0020
112   001B              
113   001B  00 00 00 00 00 
                           defs 0x0020 - ASMPC
114   0020              
115   0020              IF ((__crt_enable_rst & $1010) = $10)
116   0020              
117   0020                 EXTERN _z180_rst_20h
118   0020  C3 00 00       jp     _z180_rst_20h
119   0023              
120   0023              ELSE
121   0023              
122   0023                 IF ((__crt_enable_rst & $1010) = $1010)
123   0023              
124   0023                 jp     __z180_rst_20h
125   0023              
126   0023                 ELSE
127   0023              
128   0023                 jp     l_ret
129   0023              
130   0023                 ENDIF
131   0023              
132   0023              ENDIF
133   0023              
134   0023              IF ((__crt_enable_rst & $1010) != $1010)
135   0023              
136   0023                 PUBLIC _z180_rst_20h_vector
137   0023                 defc   _z180_rst_20h_vector = $21
138   0023              
139   0023              ENDIF
140   0023              
141   0023              ; address = 0x0028
142   0023              
143   0023  00 00 00 00 00 
                           defs 0x0028 - ASMPC
144   0028              
145   0028              IF ((__crt_enable_rst & $2020) = $20)
146   0028              
147   0028                 EXTERN _z180_rst_28h
148   0028  C3 00 00       jp     _z180_rst_28h
149   002B              
150   002B              ELSE
151   002B              
152   002B                 IF ((__crt_enable_rst & $2020) = $2020)
153   002B              
154   002B                 jp     __z180_rst_28h
155   002B              
156   002B                 ELSE
157   002B              
158   002B                 jp     l_ret
159   002B              
160   002B                 ENDIF
161   002B              
162   002B              ENDIF
163   002B              
164   002B              IF ((__crt_enable_rst & $2020) != $2020)
165   002B              
166   002B                 PUBLIC _z180_rst_28h_vector
167   002B                 defc   _z180_rst_28h_vector = $29
168   002B              
169   002B              ENDIF
170   002B              
171   002B              ; address = 0x0030
172   002B              
173   002B  00 00 00 00 00 
                           defs 0x0030 - ASMPC
174   0030              
175   0030              IF ((__crt_enable_rst & $4040) = $40)
176   0030              
177   0030                 EXTERN _z180_rst_30h
178   0030  C3 00 00       jp     _z180_rst_30h
179   0033              
180   0033              ELSE
181   0033              
182   0033                 IF ((__crt_enable_rst & $4040) = $4040)
183   0033              
184   0033                 jp     __z180_rst_30h
185   0033              
186   0033                 ELSE
187   0033              
188   0033                 jp     l_ret
189   0033              
190   0033                 ENDIF
191   0033              
192   0033              ENDIF
193   0033              
194   0033              IF ((__crt_enable_rst & $4040) != $4040)
195   0033              
196   0033                 PUBLIC _z180_rst_30h_vector
197   0033                 defc   _z180_rst_30h_vector = $31
198   0033              
199   0033              ENDIF
200   0033              
201   0033              
202   0033              ; address = 0x0038
203   0033              ; im 1 isr
204   0033              
205   0033  00 00 00 00 00 
                           defs 0x0038 - ASMPC
206   0038              
207   0038              IF ((__crt_enable_rst & $8080) = $80)
208   0038              
209   0038                 EXTERN _z180_rst_38h
210   0038  C3 00 00       jp     _z180_rst_38h
211   003B              
212   003B              ELSE
213   003B              
214   003B                 IF ((__crt_enable_rst & $8080) = $8080)
215   003B              
216   003B                 jp     __z180_rst_38h
217   003B              
218   003B                 ELSE
219   003B              
220   003B                 jp     l_ei_reti
221   003B              
222   003B                 ENDIF
223   003B              
224   003B              ENDIF
225   003B              
226   003B              IF ((__crt_enable_rst & $8080) != $8080)
227   003B              
228   003B                 PUBLIC _z180_rst_38h_vector
229   003B                 defc   _z180_rst_38h_vector = $39
230   003B              
231   003B              ENDIF
232   003B              
233   003B              
234   003B              ; address = 0x0066
235   003B              
236   003B  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      005B  00 00 00 00 00 00 00 00 00 00 00 
                           defs 0x0066 - ASMPC
237   0066              
238   0066              IF (__crt_enable_nmi = 1)
239   0066              
240   0066                 EXTERN _z180_nmi
241   0066                 jp     _z180_nmi
242   0066              
243   0066              ELSE
244   0066              
245   0066                 IF (__crt_enable_nmi > 1)
246   0066              
247   0066                 jp     __z180_nmi
248   0066              
249   0066                 ELSE
250   0066              
251   0066  ED 45          retn
252   0068              
253   0068                 ENDIF
254   0068              
255   0068              ENDIF
256   0068              
257   0068              IF (__crt_enable_nmi <= 1)
258   0068              
259   0068                 PUBLIC _z180_nmi_vector
260   0068                 defc   _z180_nmi_vector = $67
261   0068              
262   0068              ENDIF
263   0068              
264   0068              ; address = 0x0080
265   0068              
266   0068  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                           defs 0x0080 - ASMPC
267   0080              
268   0080              __Test_Trap:
269   0080              
270   0080  F5             push af
271   0081  3E 00          ld a,__IO_BASE_ADDRESS
272   0083              
273   0083  ED 39 3F       out0 (0x3f),a        ; out0 (ICR),a
274   0086              
275   0086  ED 38 34       in0 a,(ITC)
276   0089              
277   0089  EE 80          xor $80
278   008B  FA 94 00       jp m, __reset
279   008E              
280   008E  ED 39 34       out0 (ITC),a
281   0091              
282   0091              IF (__crt_enable_trap = 1)
283   0091              
284   0091                 EXTERN _z180_trap
285   0091  C3 00 00       jp     _z180_trap
286   0094              
287   0094              ELSE
288   0094              
289   0094                 IF (__crt_enable_trap > 1)
290   0094              
291   0094                 jp     __z180_trap
292   0094              
293   0094                 ELSE
294   0094              
295   0094                 EXTERN __Unhandled_Trap
296   0094                 jp     __Unhandled_Trap
297   0094              
298   0094                 ENDIF
299   0094              
300   0094              ENDIF
301   0094              
302   0094              IF (__crt_enable_trap <= 1)
303   0094              
304   0094                 PUBLIC _z180_trap_vector
305   0094                 defc   _z180_trap_vector = ASMPC - 2
306   0094              
307   0094              ENDIF
308   0094              
309   0094              __reset:
310   0094              
311   0094                 include "../crt_start_di.inc"
1     0094                 IF (__crt_enable_eidi & 0x01)
2     0094              
3     0094  F3                di
4     0095              
5     0095                 ENDIF
6     0095              
312   0095              
313   0095              IF (REGISTER_SP = -1)
314   0095              
315   0095                 pop af
316   0095              
317   0095              ENDIF
318   0095              
319   0095              IF (__crt_org_vector_table = 0)
320   0095              
321   0095                 ld a,__IO_VECTOR_BASE
322   0095                 out0 (IL),a
323   0095              
324   0095              ENDIF
325   0095              
326   0095              ; now jump down to __Start at 0x0100
327   0095              
328   0095  C3 00 01       jp __Start
329   0098              
330   0098              ; address = 0x0100
331   0098              
332   0098  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00B8  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00D8  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00F8  00 00 00 00 00 00 00 00 
                           defs 0x0100 - ASMPC
333   0100              
334   0100                 defc __page_zero_present = 1
335   0100              
336   0100              
1581  0100              
1582  0100              ENDIF
1583  0100              
1584  0100              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1585  0100              ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1586  0100              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1587  0100              
1588  0100              __Start:
1589  0100              
1590  0100                 include "../crt_start_di.inc"
1     0100                 IF (__crt_enable_eidi & 0x01)
2     0100              
3     0100  F3                di
4     0101              
5     0101                 ENDIF
6     0101              
1591  0101                 include "../crt_save_sp.inc"
1     0101              
2     0101                 ; do not save sp if
3     0101                 ; * program jumps to address on exit
4     0101                 ; * program halts on exit
5     0101              
6     0101                 IF (__crt_on_exit & 0x10000)
7     0101              
8     0101                    IF (__crt_on_exit & 0x8)
9     0101              
10    0101                       ; program restarts on exit
11    0101              
12    0101                       IF (__register_sp = -1)
13    0101              
14    0101                          ld (__sp_or_ret),sp
15    0101              
16    0101                       ENDIF
17    0101              
18    0101                    ELSE
19    0101              
20    0101                       IF (__crt_on_exit & 0x2)
21    0101              
22    0101                          ; program returns to caller on exit
23    0101              
24    0101                          ld (__sp_or_ret),sp
25    0101              
26    0101                       ELSE
27    0101              
28    0101                          IF (__crt_on_exit & 0x4)
29    0101              
30    0101                             ; program jumps to caller on exit
31    0101              
32    0101                             IF (__crt_enable_commandline != 2)
33    0101              
34    0101                                pop hl
35    0101                                ld (__sp_or_ret),hl
36    0101              
37    0101                             ELSE
38    0101              
39    0101                                pop de
40    0101                                ld (__sp_or_ret),de
41    0101              
42    0101                             ENDIF
43    0101              
44    0101                          ENDIF
45    0101              
46    0101                       ENDIF
47    0101              
48    0101                    ENDIF
49    0101              
50    0101                 ENDIF
51    0101              
1592  0101              
1593  0101              __Restart:
1594  0101              
1595  0101                 include "../crt_init_sp.inc"
1     0101              IF __register_sp < -1
2     0101              
3     0101                 ld sp,(-__register_sp)      ; stack location is stored at memory address
4     0101              
5     0101              ELSE
6     0101              
7     0101                 IF __register_sp != -1
8     0101              
9     0101  31 DE FF          ld sp,__register_sp      ; stack is at fixed address
10    0104              
11    0104                 ENDIF
12    0104              
13    0104              ENDIF
14    0104              
1596  0104              
1597  0104                 ; command line
1598  0104              
1599  0104                 IF (__crt_enable_commandline = 1) || (__crt_enable_commandline >= 3)
1600  0104              
1601  0104                    include "../crt_cmdline_empty.inc"
1602  0104              
1603  0104                 ENDIF
1604  0104              
1605  0104              __Restart_2:
1606  0104              
1607  0104                 IF __crt_enable_commandline >= 1
1608  0104              
1609  0104                    push hl                  ; argv
1610  0104                    push bc                  ; argc
1611  0104              
1612  0104                 ENDIF
1613  0104              
1614  0104                 ; initialize data section
1615  0104              
1616  0104                 include "../clib_init_data.inc"
1     0104              
2     0104                 ; initialize data section
3     0104              
4     0104                 IF (__crt_model = 1)
5     0104              
6     0104                    ; rom model + data section is not compressed
7     0104              
8     0104                    EXTERN __CODE_END_tail
9     0104                    EXTERN __DATA_head, __DATA_END_tail
10    0104              
11    0104                    ld hl,__CODE_END_tail
12    0104                    ld de,__DATA_head
13    0104                    ld bc,__DATA_END_tail - __DATA_head
14    0104              
15    0104                    EXTERN asm_memcpy
16    0104                    call   asm_memcpy
17    0104              
18    0104                 ENDIF
19    0104              
20    0104                 IF (__crt_model >= 2)
21    0104              
22    0104                    ; rom model + data section is compressed
23    0104              
24    0104                    EXTERN __CODE_END_tail
25    0104              		EXTERN __DATA_head, __DATA_END_tail
26    0104              
27    0104  21 00 00          ld hl,__CODE_END_tail
28    0107  11 00 00          ld de,__DATA_head
29    010A  01 00 00          ld bc,__DATA_END_tail - __DATA_head
30    010D              
31    010D  78                ld a,b
32    010E  B1                or c
33    010F              
34    010F                    EXTERN   asm_dzx7_standard
35    010F  C4 00 00          call nz, asm_dzx7_standard
36    0112              
37    0112                 ENDIF
38    0112              
1617  0112              
1618  0112                 ; initialize bss section
1619  0112              
1620  0112                 include "../clib_init_bss.inc"
1     0112              
2     0112                 ; initialize bss section
3     0112              
4     0112                 IF __crt_initialize_bss
5     0112              
6     0112                       EXTERN asm_memset
7     0112                       EXTERN __BSS_head, __BSS_UNINITIALIZED_head
8     0112              
9     0112  21 00 00             ld hl,__BSS_head
10    0115  01 00 00             ld bc,__BSS_UNINITIALIZED_head - __BSS_head
11    0118              
12    0118  1E 00                ld e,0
13    011A  CD 00 00             call asm_memset
14    011D              
15    011D                 ENDIF
16    011D              
1621  011D              
1622  011D                 ; interrupt mode
1623  011D              
1624  011D                 include "../crt_set_interrupt_mode.inc"
1     011D                 IF (__crt_org_vector_table > 0)
2     011D              
3     011D                    ; copy interrupt vector table to final destination
4     011D              
5     011D                    EXTERN __interrupt_vectors_head
6     011D                    EXTERN __interrupt_vectors_size
7     011D              
8     011D  21 00 00          ld hl,__interrupt_vectors_head
9     0120  11 E0 FF          ld de,__crt_org_vector_table
10    0123  01 00 00          ld bc,__interrupt_vectors_size
11    0126              
12    0126                    EXTERN asm_memcpy
13    0126  CD 00 00          call   asm_memcpy
14    0129              
15    0129                 ENDIF
16    0129              
17    0129                 IF (__crt_org_vector_table != 0)
18    0129              
19    0129                    IF (__crt_org_vector_table < 0)
20    0129              
21    0129                       ld a,-__crt_org_vector_table/$100
22    0129              
23    0129                    ELSE
24    0129              
25    0129  3E FF                ld a,__crt_org_vector_table/$100
26    012B              
27    012B                    ENDIF
28    012B              
29    012B  ED 47             ld i,a
30    012D              
31    012D                    IF (__Z180)
32    012D              
33    012D                      ; Set the z180 internal interrupt vector low byte
34    012D              
35    012D  3E E0               ld a,+(__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
36    012F  ED 39 33            out0 (IL),a
37    0132              
38    0132                    ENDIF
39    0132              
40    0132                 ENDIF
41    0132              
42    0132                 IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
43    0132              
44    0132                    ; set interrupt mode
45    0132              
46    0132  ED 56             im __crt_interrupt_mode
47    0134              
48    0134                 ENDIF
49    0134              
1625  0134              
1626  0134              SECTION code_crt_init          ; user and library initialization
1627  009E              
1628  009E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1629  009E              ;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1630  009E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1631  009E              
1632  009E              SECTION code_crt_main
1633  0000              
1634  0000                 include "../crt_start_ei.inc"
1     0000                 IF (__crt_enable_eidi & 0x02)
2     0000              
3     0000  FB                ei
4     0001              
5     0001                 ENDIF
6     0001              
1635  0001              
1636  0001                 ; call user program
1637  0001              
1638  0001  CD 00 00       call _main                  ; hl = return status
1639  0004              
1640  0004                 ; run exit stack
1641  0004              
1642  0004                 IF __clib_exit_stack_size > 0
1643  0004              
1644  0004                    EXTERN asm_exit
1645  0004                    jp asm_exit              ; exit function jumps to __Exit
1646  0004              
1647  0004                 ENDIF
1648  0004              
1649  0004              __Exit:
1650  0004              
1651  0004                 IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
1652  0004              
1653  0004                    ; not restarting
1654  0004              
1655  0004  E5                push hl                  ; save return status
1656  0005              
1657  0005                 ENDIF
1658  0005              
1659  0005              SECTION code_crt_exit          ; user and library cleanup
1660  0000              SECTION code_crt_return
1661  0000              
1662  0000                 ; close files
1663  0000              
1664  0000                 include "../clib_close.inc"
1     0000                 IF __crt_enable_close
2     0000              
3     0000                    ; TODO
4     0000                    ; close open files
5     0000              
6     0000                 ENDIF
7     0000              
1665  0000              
1666  0000                 ; terminate
1667  0000              
1668  0000                 include "../crt_exit_eidi.inc"
1     0000                 IF (__crt_enable_eidi & 0x10)
2     0000              
3     0000  F3                di
4     0001              
5     0001                 ELSE
6     0001              
7     0001                    IF (__crt_enable_eidi & 0x20)
8     0001              
9     0001                       ei
10    0001              
11    0001                    ENDIF
12    0001              
13    0001                 ENDIF
14    0001              
1669  0001                 include "../crt_restore_sp.inc"
1     0001              
2     0001                 IF (__crt_on_exit & 0x10000)
3     0001              
4     0001                    IF (__crt_on_exit & 0x8)
5     0001              
6     0001                       ; program restarts
7     0001              
8     0001                       IF (__crt_enable_commandline < 2)
9     0001              
10    0001                          IF (__register_sp = -1)
11    0001              
12    0001                             ld sp,(__sp_or_ret)
13    0001              
14    0001                          ENDIF
15    0001              
16    0001                       ELSE
17    0001              
18    0001                          IF (__register_sp = -1)
19    0001              
20    0001                             ld sp,(__sp_or_ret)
21    0001              
22    0001                          ENDIF
23    0001              
24    0001                       ENDIF
25    0001              
26    0001                    ELSE
27    0001              
28    0001                       pop hl                ; hl = return status
29    0001              
30    0001                       IF (__crt_on_exit & 0x2)
31    0001              
32    0001                          ; program returns to caller
33    0001              
34    0001                          ld sp,(__sp_or_ret)
35    0001              
36    0001                       ENDIF
37    0001              
38    0001                    ENDIF
39    0001              
40    0001                 ELSE
41    0001              
42    0001                    ; program jumps to absolute address
43    0001              
44    0001  E1                pop hl                   ; hl = return status
45    0002              
46    0002                 ENDIF
47    0002              
1670  0002                 include "../crt_program_exit.inc"
1     0002              
2     0002                 IF (__crt_on_exit & 0x10000)
3     0002              
4     0002                    IF (__crt_on_exit & 0x8)
5     0002              
6     0002                       ; program restarts
7     0002              
8     0002                       IF (__crt_enable_commandline < 2)
9     0002              
10    0002                          jp __Restart
11    0002              
12    0002                       ELSE
13    0002              
14    0002                          IF (__register_sp != -1)
15    0002              
16    0002                             include "../crt_init_sp.inc"
17    0002              
18    0002                          ENDIF
19    0002              
20    0002                          include "../crt_cmdline_empty.inc"
21    0002              
22    0002                          jp __Restart_2
23    0002              
24    0002                       ENDIF
25    0002              
26    0002                    ELSE
27    0002              
28    0002                       IF (__crt_on_exit & 0x2)
29    0002              
30    0002                          ; program returns to caller
31    0002              
32    0002                          ret
33    0002              
34    0002                       ELSE
35    0002              
36    0002                          IF (__crt_on_exit & 0x4)
37    0002              
38    0002                             ; program jumps to caller
39    0002              
40    0002                             ld de,(__sp_or_ret)
41    0002                             push de
42    0002                             ret
43    0002              
44    0002                          ELSE
45    0002              
46    0002                             ; program halts
47    0002              
48    0002                             halt
49    0002                             jr ASMPC
50    0002              
51    0002                          ENDIF
52    0002              
53    0002                       ENDIF
54    0002              
55    0002                    ENDIF
56    0002              
57    0002                 ELSE
58    0002              
59    0002                    ; program jumps to absolute address
60    0002              
61    0002                    IF (__crt_on_exit & 0xffff)
62    0002              
63    0002  C3 01 00             jp __crt_on_exit & 0xffff
64    0005              
65    0005                    ELSE
66    0005              
67    0005                       rst 0
68    0005              
69    0005                    ENDIF
70    0005              
71    0005                 ENDIF
72    0005              
1671  0005              
1672  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1673  0005              ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1674  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1675  0005              
1676  0005              include "../crt_jump_vectors_z180.inc"
1     0005              IF __page_zero_present
2     0005              
3     0005              SECTION smc_jump_vectors
4     0000              
5     0000              IF (__crt_enable_trap > 1)
6     0000              
7     0000                 PUBLIC _z180_trap_vector
8     0000              
9     0000                 defc _z180_trap_vector = __z180_trap + 1
10    0000              
11    0000                 EXTERN _z180_trap
12    0000              
13    0000                 __z180_trap:
14    0000              
15    0000                    jp _z180_trap
16    0000              
17    0000              ENDIF
18    0000              
19    0000              IF ((__crt_enable_rst & 0x0202) = 0x0202)
20    0000              
21    0000                 PUBLIC _z180_rst_08h_vector
22    0000              
23    0000                 defc _z180_rst_08h_vector = __z180_rst_08h + 1
24    0000              
25    0000                 EXTERN _z180_rst_08h
26    0000              
27    0000                 __z180_rst_08h:
28    0000              
29    0000                    jp _z180_rst_08h
30    0000              
31    0000              ENDIF
32    0000              
33    0000              IF ((__crt_enable_rst & 0x0404) = 0x0404)
34    0000              
35    0000                 PUBLIC _z180_rst_10h_vector
36    0000              
37    0000                 defc _z180_rst_10h_vector = __z180_rst_10h + 1
38    0000              
39    0000                 EXTERN _z180_rst_10h
40    0000              
41    0000                 __z180_rst_10h:
42    0000              
43    0000                    jp _z180_rst_10h
44    0000              
45    0000              ENDIF
46    0000              
47    0000              IF ((__crt_enable_rst & 0x0808) = 0x0808)
48    0000              
49    0000                 PUBLIC _z180_rst_18h_vector
50    0000              
51    0000                 defc _z180_rst_18h_vector = __z180_rst_18h + 1
52    0000              
53    0000                 EXTERN _z180_rst_18h
54    0000              
55    0000                 __z180_rst_18h:
56    0000              
57    0000                    jp _z180_rst_18h
58    0000              
59    0000              ENDIF
60    0000              
61    0000              IF ((__crt_enable_rst & 0x1010) = 0x1010)
62    0000              
63    0000                 PUBLIC _z180_rst_20h_vector
64    0000              
65    0000                 defc _z180_rst_20h_vector = __z180_rst_20h + 1
66    0000              
67    0000                 EXTERN _z180_rst_20h
68    0000              
69    0000                 __z180_rst_20h:
70    0000              
71    0000                    jp _z180_rst_20h
72    0000              
73    0000              ENDIF
74    0000              
75    0000              IF ((__crt_enable_rst & 0x2020) = 0x2020)
76    0000              
77    0000                 PUBLIC _z180_rst_28h_vector
78    0000              
79    0000                 defc _z180_rst_28h_vector = __z180_rst_28h + 1
80    0000              
81    0000                 EXTERN _z180_rst_28h
82    0000              
83    0000                 __z180_rst_28h:
84    0000              
85    0000                    jp _z180_rst_28h
86    0000              
87    0000              ENDIF
88    0000              
89    0000              IF ((__crt_enable_rst & 0x4040) = 0x4040)
90    0000              
91    0000                 PUBLIC _z180_rst_30h_vector
92    0000              
93    0000                 defc _z180_rst_30h_vector = __z180_rst_30h + 1
94    0000              
95    0000                 EXTERN _z180_rst_30h
96    0000              
97    0000                 __z180_rst_30h:
98    0000              
99    0000                    jp _z180_rst_30h
100   0000              
101   0000              ENDIF
102   0000              
103   0000              IF ((__crt_enable_rst & 0x8080) = 0x8080)
104   0000              
105   0000                 PUBLIC _z180_rst_38h_vector
106   0000              
107   0000                 defc _z180_rst_38h_vector = __z180_rst_38h + 1
108   0000              
109   0000                 EXTERN _z180_rst_38h
110   0000              
111   0000                 __z180_rst_38h:
112   0000              
113   0000                    jp _z180_rst_38h
114   0000              
115   0000              ENDIF
116   0000              
117   0000              IF (__crt_enable_nmi > 1)
118   0000              
119   0000                 PUBLIC _z180_nmi_vector
120   0000              
121   0000                 defc _z180_nmi_vector = __z180_nmi + 1
122   0000              
123   0000                 EXTERN _z180_nmi
124   0000              
125   0000                 __z180_nmi:
126   0000              
127   0000                    jp _z180_nmi
128   0000              
129   0000              ENDIF
130   0000              
131   0000              ENDIF
132   0000              
1677  0000              include "crt_interrupt_vectors_z180.inc"
1     0000              
2     0000              IF (__Z180 != 0) && (__page_zero_present) && (__crt_org_vector_table > 0x100)
3     0000              
4     0000              ; defc __Z180 = 0x04
5     0000              
6     0000              ; defc __Z180_Z80180 = 0x01
7     0000              ; defc __Z180_Z8L180 = 0x02
8     0000              ; defc __Z180_Z8S180 = 0x04
9     0000              
10    0000              SECTION interrupt_vectors
11    0000              
12    0000              EXTERN l_ret
13    0000              
14    0000              PUBLIC z180_int_int1, z180_int_int2
15    0000              PUBLIC z180_int_prt0, z180_int_prt1
16    0000              PUBLIC z180_int_dma0, z180_int_dma1
17    0000              PUBLIC z180_int_csio
18    0000              PUBLIC z180_int_asci0, z180_int_asci1
19    0000              
20    0000              ; z180 internal interrupt vector base address = __crt_org_vector_table + __IO_VECTOR_BASE
21    0000              
22    0000              ; very ugly to insert/skip __IO_VECTOR_BASE bytes. must be a better way to achieve this.
23    0000              defs __IO_VECTOR_BASE - ASMPC
24    0000              
25    0000              defc z180_int_int1  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x00
26    0000  00 00       defw l_ret
27    0002              
28    0002              defc z180_int_int2  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x02
29    0002  00 00       defw l_ret
30    0004              
31    0004              defc z180_int_prt0  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x04
32    0004              EXTERN _z180_int_prt0   ; a system tick
33    0004  00 00       defw _z180_int_prt0
34    0006              
35    0006              defc z180_int_prt1  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x06
36    0006  00 00       defw l_ret
37    0008              
38    0008              defc z180_int_dma0  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x08
39    0008  00 00       defw l_ret
40    000A              
41    000A              defc z180_int_dma1  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x0A
42    000A  00 00       defw l_ret
43    000C              
44    000C              defc z180_int_csio  = __crt_org_vector_table + __IO_VECTOR_BASE + 0x0C
45    000C  00 00       defw l_ret
46    000E              
47    000E              defc z180_int_asci0 = __crt_org_vector_table + __IO_VECTOR_BASE + 0x0E
48    000E              EXTERN _z180_int_asci0  ; FTDI interface on asci0
49    000E  00 00       defw _z180_int_asci0
50    0010              
51    0010              defc z180_int_asci1 = __crt_org_vector_table + __IO_VECTOR_BASE + 0x10
52    0010              EXTERN _z180_int_asci1  ; ESP-01 interface on asci1
53    0010  00 00       defw _z180_int_asci1
54    0012              
55    0012              ENDIF
56    0012              
1678  0012              
1679  0012              IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
1680  0012              
1681  0012                 SECTION BSS_UNINITIALIZED
1682  0012                 __sp_or_ret:  defw 0
1683  0012              
1684  0012              ENDIF
1685  0012              
1686  0012              include "../clib_variables.inc"
1     0012              
2     0012              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0012              ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0012              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0012              
6     0012              IF __clib_balloc_table_size > 0
7     0012              
8     0012                 ; create balloc table
9     0012              
10    0012                 SECTION data_clib
11    0012                 SECTION data_alloc_balloc
12    0012              
13    0012                 PUBLIC __balloc_array
14    0012              
15    0012                 __balloc_array:             defw __balloc_table
16    0012              
17    0012                 SECTION bss_clib
18    0012                 SECTION bss_alloc_balloc
19    0012              
20    0012                 __balloc_table:             defs __clib_balloc_table_size * 2
21    0012              
22    0012              ENDIF
23    0012              
24    0012              IF __clib_malloc_heap_size = -1
25    0012              
26    0012                 ; place malloc heap between bss section and bottom of the stack
27    0012              
28    0012                 SECTION data_clib
29    0012                 SECTION data_alloc_malloc
30    0012              
31    0012                 PUBLIC __malloc_heap
32    0012              
33    0012                 EXTERN __BSS_END_tail
34    0012              
35    0012                 __malloc_heap:              defw __BSS_END_tail
36    0012              
37    0012                 SECTION code_crt_init
38    0012              
39    0012                 ld hl,-1                    ; ensure sp == 0 is accepted
40    0012                 add hl,sp                   ; hl = top of the stack
41    0012              
42    0012                 ld de,__BSS_END_tail
43    0012              
44    0012                 xor a
45    0012                 sbc hl,de                   ; hl = space between top of stack and end of bss - 1
46    0012              
47    0012                 jp c, __Exit                ; if stack overlaps bss, this is a fatal error
48    0012              
49    0012                 ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
50    0012                 sbc hl,bc                   ; hl = max heap size - 15
51    0012              
52    0012                 jp c, __Exit                ; if no room for heap, this is a fatal error
53    0012              
54    0012                 ld bc,15
55    0012                 add hl,bc
56    0012              
57    0012                 ld c,l
58    0012                 ld b,h                      ; bc = available heap size
59    0012              
60    0012                 ex de,hl                    ; hl = __BSS_END_tail = start of heap
61    0012              
62    0012                 EXTERN asm_heap_init
63    0012                 call asm_heap_init
64    0012              
65    0012              ENDIF
66    0012              
67    0012              IF __clib_malloc_heap_size < -1
68    0012              
69    0012                 ; place malloc heap between bss section and including address abs(CLIB_MALLOC_HEAP_SIZE)
70    0012              
71    0012                 SECTION data_clib
72    0012                 SECTION data_alloc_malloc
73    0012              
74    0012                 PUBLIC __malloc_heap
75    0012              
76    0012                 EXTERN __BSS_END_tail
77    0012              
78    0012                 __malloc_heap:              defw __BSS_END_tail
79    0012              
80    0012                 SECTION code_crt_init
81    0012              
82    0012                 ld hl,-__clib_malloc_heap_size - 13
83    0012                 ld de,__BSS_END_tail
84    0012              
85    0012                 xor a
86    0012                 sbc hl,de
87    0012              
88    0012                 jp c, __Exit                ; if no room for minimum size heap, fatal error
89    0012              
90    0012                 ld bc,14
91    0012                 add hl,bc
92    0012              
93    0012                 ld c,l
94    0012                 ld b,h                      ; bc = available heap size
95    0012              
96    0012                 ex de,hl                    ; hl = __BSS_END_tail = start of heap
97    0012              
98    0012                 EXTERN asm_heap_init
99    0012                 call asm_heap_init
100   0012              
101   0012              ENDIF
102   0012              
103   0012              IF __clib_malloc_heap_size > 14
104   0012              
105   0012                 ; create malloc heap in bss section
106   0012              
107   0012                 SECTION data_clib
108   0000                 SECTION data_alloc_malloc
109   0000              
110   0000                 PUBLIC __malloc_heap
111   0000              
112   0000  00 00          __malloc_heap:              defw __malloc_block
113   0002              
114   0002                 SECTION bss_clib
115   0000                 SECTION bss_alloc_malloc
116   0000              
117   0000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      02A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      02C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      02E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      03A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      03C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      03E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      04A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      04C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      04E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      05A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      05C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      05E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      06A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      06C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      06E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      07A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      07C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      07E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      08A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      08C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      08E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      09A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      09C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      09E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0A00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0A20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0A40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0A60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0A80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0AA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0AC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0AE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0B00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0B20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0B40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0B60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0B80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0BA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0BC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0BE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0C00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0C20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0C40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0C60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0C80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0CA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0CC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0CE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0D00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0D20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0D40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0D60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0D80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0DA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0DC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0DE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0E00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0E20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0E40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0E60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0E80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0EA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0EC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0EE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0F00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0F20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0F40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0F60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0F80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0FA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0FC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0FE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                           __malloc_block:             defs __clib_malloc_heap_size
118   1000              
119   1000                 SECTION code_crt_init
120   009E              
121   009E  21 00 00       ld hl,__malloc_block
122   00A1  01 00 10       ld bc,__clib_malloc_heap_size
123   00A4              
124   00A4                 EXTERN asm_heap_init
125   00A4  CD 00 00       call asm_heap_init
126   00A7              
127   00A7              ENDIF
128   00A7              
129   00A7                 ; create exit stack
130   00A7              
131   00A7                 SECTION bss_clib
132   0000                 SECTION bss_stdlib
133   0000              
134   0000                 PUBLIC __exit_stack
135   0000              
136   0000  00             __exit_stack:               defb 0
137   0001                                             defs __exit_stack_size * 2
138   0001              
139   0001                 ; create quickexit stack
140   0001              
141   0001                 SECTION bss_clib
142   0000                 SECTION bss_stdlib
143   0001              
144   0001                 PUBLIC __quickexit_stack
145   0001              
146   0001  00             __quickexit_stack:          defb 0
147   0002                                             defs __quickexit_stack_size * 2
148   0002              
149   0002                 ; assign thread id
150   0002              
151   0002                 SECTION data_clib
152   0000                 SECTION data_threads
153   0000              
154   0000                 PUBLIC __thrd_id
155   0000              
156   0000  01             __thrd_id:                  defb 1
157   0001              
158   0001              ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
159   0001              
1687  0001              
1688  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1689  0001              ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1690  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1691  0001              
1692  0001              include "../clib_stubs.inc"
1     0001              
2     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001                 ;; unimplemented
4     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001                 ; system()
7     0001              
8     0001                 PUBLIC __ch_system
9     0001              
10    0001                 EXTERN error_zc
11    0001              
12    0001                 defc __ch_system = error_zc
13    0001              
14    0001                 ; threads
15    0001                 ; these functions are preliminary only
16    0001              
17    0001                 PUBLIC __thread_context_switch
18    0001                 PUBLIC __thread_block_timeout
19    0001                 PUBLIC __thread_unblock
20    0001              
21    0001                 EXTERN l_ret
22    0001              
23    0001                 defc __thread_context_switch = l_ret
24    0001                 defc __thread_block_timeout  = l_ret
25    0001                 defc __thread_unblock        = l_ret
26    0001              
27    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0001                 ;; dynamically generated functions
29    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0001              
31    0001                 ; dynamic printf
32    0001              
33    0001                 IFNDEF CLIB_OPT_PRINTF
34    0001                    IFDEF CLIB_OPT_PRINTF_2
35    0001                       defc CLIB_OPT_PRINTF = 0
36    0001                    ENDIF
37    0001                 ENDIF
38    0001              
39    0001                 IFNDEF CLIB_OPT_PRINTF_2
40    0001                    IFDEF CLIB_OPT_PRINTF
41    0001                       defc CLIB_OPT_PRINTF_2 = 0
42    0001                    ENDIF
43    0001                 ENDIF
44    0001              
45    0001                 IFDEF CLIB_OPT_PRINTF
46    0001              
47    0001                    IF __SDCC_IY
48    0001              
49    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
50    0001              
51    0001                    ELSE
52    0001              
53    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
54    0001              
55    0001                    ENDIF
56    0001              
57    0001                 ENDIF
58    0001              
59    0001                 ; dynamic scanf
60    0001              
61    0001                 IFNDEF CLIB_OPT_SCANF
62    0001                    IFDEF CLIB_OPT_SCANF_2
63    0001                       defc CLIB_OPT_SCANF = 0
64    0001                    ENDIF
65    0001                 ENDIF
66    0001              
67    0001                 IFNDEF CLIB_OPT_SCANF_2
68    0001                    IFDEF CLIB_OPT_SCANF
69    0001                       defc CLIB_OPT_SCANF_2 = 0
70    0001                    ENDIF
71    0001                 ENDIF
72    0001              
73    0001                 IFDEF CLIB_OPT_SCANF
74    0001              
75    0001                    IF __SDCC_IY
76    0001              
77    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
78    0001              
79    0001                    ELSE
80    0001              
81    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
82    0001              
83    0001                    ENDIF
84    0001              
85    0001                 ENDIF
86    0001              
1693  0001              
1694  0001              
1695  0001              
1696  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1697  0001              ;; basic driver ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1698  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1699  0001              
1700  0001              
1701  0001              
1702  0001              
1703  0001              
1704  0001              
1705  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1706  0001              ;; none ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1707  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1708  0001              
1709  0001              
1710  0001              
