Name     YAZ180_Logic ;
PartNo   00 ;
Date     16/09/2017 ;
Revision 09 ;
Designer Phillip Stevens ;
Company  Emotiv8 ;
Assembly None ;
Location Melbourne Australia ;
Device   G16V8MS ;

/* *************** INPUT PINS *********************/

PIN   1  =   RESET_CLK          ; /* PROGRAM mode D flipflop CLK, POSITIVE EDGE, Connected to RESET  */
PIN   2  =  !HALT               ; /* CPU Halt opcode executed, ACTIVE LOW */

PIN   3  =  !WR                 ; /* Write Strobe, ACTIVE LOW */
PIN   4  =  !RD                 ; /* Read Strobe, ACTIVE LOW */

PIN   5  =  !USB_CS             ; /* USB WR/RD Chip Select, ACTIVE LOW */

PIN   6  =  !TXE                ; /* FT245R USB Transmit Enable, ACTIVE LOW */  
PIN   7  =  !RXF                ; /* FT245R USB Receive Enable, ACTIVE LOW */

PIN   8  =  !PAUSE              ; /* Am9511A-1 FPU Pause during command processing */
PIN   9  =  !SS_REQ             ; /* Single Step mode request pin from BREAK circuit, ACTIVE LOW */

PIN  12  =  !SS_WAIT_REQ        ; /* Wait request from Single Step circuit, ACTIVE LOW */

PIN  13  =  !RESET_REQ          ; /* Reset request pin. ACTIVE LOW From RESET button via debounce */


/* *************** OUTPUT PINS *********************/

PIN  19  =  !PROGRAM            ; /* Enter Programming Mode, ACTIVE LOW  */ 

PIN  18  =  !RESIN              ; /* Trigger System RESET, ACTIVE LOW  */
PIN  17  =  !WAIT               ; /* CPU WAIT State, ACTIVE LOW, Cause CPU to wait until USB Data available */

PIN  16  =  !USB_WR             ; /* USB Write Chip Select, ACTIVE LOW, FT245R Doesn't have a CS pin */
PIN  15  =  !USB_RD             ; /* USB Read Chip Select, ACTIVE LOW, FT245R Doesn't have a CS pin */


/* ******************* LOGIC ***********************/

PROGRAM.D = RXF                 ; /* If USB Data available, then trigger PROGRAM mode using D flipflop, which is clocked by RESET_CLK */

CONDITION {
	IF (  WR & USB_CS )                  OUT USB_WR    ; /* Provide the USB Write Strobe */
	}

CONDITION {
	IF (  RD & USB_CS )                  OUT USB_RD    ; /* Provide the USB Read Strobe */
	}
	
CONDITION {
	IF (  WR & USB_CS &  TXE  )          OUT WAIT      ; /* If there is no space in USB Buffers for write, then WAIT for space to be available */
	IF (  RD & USB_CS & !RXF  )          OUT WAIT      ; /* If there is no data in USB Buffers for read, then WAIT for it to be available */
	IF (  SS_REQ & SS_WAIT_REQ )         OUT WAIT      ; /* We are in Single Step mode, and a WAIT request has arrived, so WAIT. */
	IF (  PAUSE )                        OUT WAIT      ; /* When the FPU needs to digest a command, then WAIT */
	}

CONDITION {
	IF (  RESET_REQ )                    OUT RESIN     ; /* If we need to RESET, then respond to a RESET_REQ */
	IF ( !PROGRAM & RXF )                OUT RESIN     ; /* If there's received USB data, and we're not in PROGRAM mode, then RESET (Start programming) */
	IF (  PROGRAM & HALT )               OUT RESIN     ; /* If we're in PROGRAM mode, and we see the Halt Opcode, then RESET (Finished programming) */
	}
